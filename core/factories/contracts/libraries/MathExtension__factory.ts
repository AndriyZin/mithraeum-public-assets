/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MathExtension,
  MathExtensionInterface,
} from "../../../contracts/libraries/MathExtension";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "isCell",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "roundTo1e18",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "roundToNext1e18",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61020761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806360d0acb314610050578063ae41bb9b14610076578063fb5608f814610099575b600080fd5b61006361005e36600461012d565b6100ac565b6040519081526020015b60405180910390f35b61008961008436600461012d565b6100ec565b604051901515815260200161006d565b6100636100a736600461012d565b610107565b6000806100b883610107565b90506100cc670de0b6b3a76400008461015c565b156100e6576100e3670de0b6b3a764000082610186565b90505b92915050565b6000610100670de0b6b3a76400008361015c565b1592915050565b600061011b670de0b6b3a76400008361019e565b6100e690670de0b6b3a76400006101b2565b60006020828403121561013f57600080fd5b5035919050565b634e487b7160e01b600052601260045260246000fd5b60008261016b5761016b610146565b500690565b634e487b7160e01b600052601160045260246000fd5b6000821982111561019957610199610170565b500190565b6000826101ad576101ad610146565b500490565b60008160001904831182151516156101cc576101cc610170565b50029056fea2646970667358221220ead17df827b353cd34f846b66848df18793744cb1185a80878e3f4a63bb3a0d364736f6c634300080d0033";

type MathExtensionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathExtensionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathExtension__factory extends ContractFactory {
  constructor(...args: MathExtensionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathExtension> {
    return super.deploy(overrides || {}) as Promise<MathExtension>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathExtension {
    return super.attach(address) as MathExtension;
  }
  override connect(signer: Signer): MathExtension__factory {
    return super.connect(signer) as MathExtension__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathExtensionInterface {
    return new utils.Interface(_abi) as MathExtensionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathExtension {
    return new Contract(address, _abi, signerOrProvider) as MathExtension;
  }
}
