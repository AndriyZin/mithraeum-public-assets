/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IWorld {
  export type PositionStruct = {
    continent: BigNumberish;
    globalX: BigNumberish;
    globalY: BigNumberish;
  };

  export type PositionStructOutput = [BigNumber, number, number] & {
    continent: BigNumber;
    globalX: number;
    globalY: number;
  };
}

export declare namespace ArmyView {
  export type ArmyCombinedDataStruct = {
    id: string;
    owner: string;
    ownerSettlementId: string;
    currentPosition: IWorld.PositionStruct;
    currentPositionSettlementId: string;
    battleId: string;
    units: BigNumberish[];
    besiegingUnits: BigNumberish[];
    onLiquidateArmyUnits: BigNumberish[];
    robberyTokensCount: BigNumberish;
    currentPath: BigNumberish[];
    pathStartTime: BigNumberish;
    pathFinishTime: BigNumberish;
    destinationPositionSettlementId: string;
  };

  export type ArmyCombinedDataStructOutput = [
    string,
    string,
    string,
    IWorld.PositionStructOutput,
    string,
    string,
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    number[],
    BigNumber,
    BigNumber,
    string
  ] & {
    id: string;
    owner: string;
    ownerSettlementId: string;
    currentPosition: IWorld.PositionStructOutput;
    currentPositionSettlementId: string;
    battleId: string;
    units: BigNumber[];
    besiegingUnits: BigNumber[];
    onLiquidateArmyUnits: BigNumber[];
    robberyTokensCount: BigNumber;
    currentPath: number[];
    pathStartTime: BigNumber;
    pathFinishTime: BigNumber;
    destinationPositionSettlementId: string;
  };
}

export interface ArmyViewInterface extends utils.Interface {
  functions: {
    "getArmyCombinedData(address,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getArmyCombinedData"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getArmyCombinedData",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getArmyCombinedData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ArmyView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArmyViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getArmyCombinedData(
      armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ArmyView.ArmyCombinedDataStructOutput] & {
        res: ArmyView.ArmyCombinedDataStructOutput;
      }
    >;
  };

  getArmyCombinedData(
    armyAddress: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ArmyView.ArmyCombinedDataStructOutput>;

  callStatic: {
    getArmyCombinedData(
      armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ArmyView.ArmyCombinedDataStructOutput>;
  };

  filters: {};

  estimateGas: {
    getArmyCombinedData(
      armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getArmyCombinedData(
      armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
