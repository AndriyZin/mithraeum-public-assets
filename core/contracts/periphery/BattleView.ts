/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IWorld {
  export type PositionStruct = {
    continent: BigNumberish;
    globalX: BigNumberish;
    globalY: BigNumberish;
  };

  export type PositionStructOutput = [BigNumber, number, number] & {
    continent: BigNumber;
    globalX: number;
    globalY: number;
  };
}

export declare namespace BattleView {
  export type BattleCombinedDataStruct = {
    id: string;
    battleCreationDate: BigNumberish;
    battleLobbyDuration: BigNumberish;
    battleOngoingDuration: BigNumberish;
    battleFinishDate: BigNumberish;
    battleSettlementId: string;
    battleGamePosition: IWorld.PositionStruct;
    sideACasualties: BigNumberish[];
    sideBCasualties: BigNumberish[];
    sideAUnitsCount: BigNumberish[];
    sideBUnitsCount: BigNumberish[];
  };

  export type BattleCombinedDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    IWorld.PositionStructOutput,
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[]
  ] & {
    id: string;
    battleCreationDate: BigNumber;
    battleLobbyDuration: BigNumber;
    battleOngoingDuration: BigNumber;
    battleFinishDate: BigNumber;
    battleSettlementId: string;
    battleGamePosition: IWorld.PositionStructOutput;
    sideACasualties: BigNumber[];
    sideBCasualties: BigNumber[];
    sideAUnitsCount: BigNumber[];
    sideBUnitsCount: BigNumber[];
  };
}

export declare namespace IBattle {
  export type TimingStruct = {
    creationTime: BigNumberish;
    lobbyDuration: BigNumberish;
    ongoingDuration: BigNumberish;
    finishTime: BigNumberish;
  };

  export type TimingStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    creationTime: BigNumber;
    lobbyDuration: BigNumber;
    ongoingDuration: BigNumber;
    finishTime: BigNumber;
  };
}

export interface BattleViewInterface extends utils.Interface {
  functions: {
    "getBattleCombinedData(address)": FunctionFragment;
    "getBattlePosition(address)": FunctionFragment;
    "getBattleTiming(address)": FunctionFragment;
    "getSideA(address)": FunctionFragment;
    "getSideB(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBattleCombinedData"
      | "getBattlePosition"
      | "getBattleTiming"
      | "getSideA"
      | "getSideB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBattleCombinedData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattlePosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleTiming",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getSideA", values: [string]): string;
  encodeFunctionData(functionFragment: "getSideB", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getBattleCombinedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattlePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleTiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSideA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSideB", data: BytesLike): Result;

  events: {};
}

export interface BattleView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BattleViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBattleCombinedData(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<[BattleView.BattleCombinedDataStructOutput]>;

    getBattlePosition(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [IWorld.PositionStructOutput] & { position: IWorld.PositionStructOutput }
    >;

    getBattleTiming(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [IBattle.TimingStructOutput] & { timing: IBattle.TimingStructOutput }
    >;

    getSideA(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSideB(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  getBattleCombinedData(
    battleAddress: string,
    overrides?: CallOverrides
  ): Promise<BattleView.BattleCombinedDataStructOutput>;

  getBattlePosition(
    battleAddress: string,
    overrides?: CallOverrides
  ): Promise<IWorld.PositionStructOutput>;

  getBattleTiming(
    battleAddress: string,
    overrides?: CallOverrides
  ): Promise<IBattle.TimingStructOutput>;

  getSideA(battleAddress: string, overrides?: CallOverrides): Promise<string[]>;

  getSideB(battleAddress: string, overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getBattleCombinedData(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<BattleView.BattleCombinedDataStructOutput>;

    getBattlePosition(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<IWorld.PositionStructOutput>;

    getBattleTiming(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<IBattle.TimingStructOutput>;

    getSideA(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSideB(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getBattleCombinedData(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBattlePosition(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBattleTiming(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSideA(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSideB(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBattleCombinedData(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBattlePosition(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBattleTiming(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSideA(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSideB(
      battleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
