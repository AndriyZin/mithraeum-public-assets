/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IUnitsAmmInterface extends utils.Interface {
  functions: {
    "applyState()": FunctionFragment;
    "currentZone()": FunctionFragment;
    "init(address,address,address,address,uint256)": FunctionFragment;
    "lastApplyStateTime()": FunctionFragment;
    "multiplier()": FunctionFragment;
    "swapToolsForExactUnits(address,uint256,uint256)": FunctionFragment;
    "swapToolsForExactUnitsByZone(address,address,uint256,uint256)": FunctionFragment;
    "tools()": FunctionFragment;
    "units()": FunctionFragment;
    "unitsBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyState"
      | "currentZone"
      | "init"
      | "lastApplyStateTime"
      | "multiplier"
      | "swapToolsForExactUnits"
      | "swapToolsForExactUnitsByZone"
      | "tools"
      | "units"
      | "unitsBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentZone",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastApplyStateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapToolsForExactUnits",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToolsForExactUnitsByZone",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tools", values?: undefined): string;
  encodeFunctionData(functionFragment: "units", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unitsBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "applyState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentZone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastApplyStateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapToolsForExactUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapToolsForExactUnitsByZone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "units", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unitsBalance",
    data: BytesLike
  ): Result;

  events: {
    "UnitsBought(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UnitsBought"): EventFragment;
}

export interface UnitsBoughtEventObject {
  buyer: string;
  armyAddress: string;
  unitsBought: BigNumber;
  toolsSpent: BigNumber;
  currentUnits: BigNumber;
  currentTools: BigNumber;
}
export type UnitsBoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  UnitsBoughtEventObject
>;

export type UnitsBoughtEventFilter = TypedEventFilter<UnitsBoughtEvent>;

export interface IUnitsAmm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUnitsAmmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentZone(overrides?: CallOverrides): Promise<[string]>;

    init(
      _zoneAddress: string,
      _worldAddress: string,
      _unitsAddress: string,
      _toolsAddress: string,
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastApplyStateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapToolsForExactUnits(
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToolsForExactUnitsByZone(
      toolsPayer: string,
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tools(overrides?: CallOverrides): Promise<[string]>;

    units(overrides?: CallOverrides): Promise<[string]>;

    unitsBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  applyState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentZone(overrides?: CallOverrides): Promise<string>;

  init(
    _zoneAddress: string,
    _worldAddress: string,
    _unitsAddress: string,
    _toolsAddress: string,
    _multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastApplyStateTime(overrides?: CallOverrides): Promise<BigNumber>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  swapToolsForExactUnits(
    settlementAddress: string,
    unitsToBuy: BigNumberish,
    maxToolsToSell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToolsForExactUnitsByZone(
    toolsPayer: string,
    settlementAddress: string,
    unitsToBuy: BigNumberish,
    maxToolsToSell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tools(overrides?: CallOverrides): Promise<string>;

  units(overrides?: CallOverrides): Promise<string>;

  unitsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    applyState(overrides?: CallOverrides): Promise<void>;

    currentZone(overrides?: CallOverrides): Promise<string>;

    init(
      _zoneAddress: string,
      _worldAddress: string,
      _unitsAddress: string,
      _toolsAddress: string,
      _multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastApplyStateTime(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    swapToolsForExactUnits(
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToolsForExactUnitsByZone(
      toolsPayer: string,
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tools(overrides?: CallOverrides): Promise<string>;

    units(overrides?: CallOverrides): Promise<string>;

    unitsBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "UnitsBought(address,address,uint256,uint256,uint256,uint256)"(
      buyer?: null,
      armyAddress?: null,
      unitsBought?: null,
      toolsSpent?: null,
      currentUnits?: null,
      currentTools?: null
    ): UnitsBoughtEventFilter;
    UnitsBought(
      buyer?: null,
      armyAddress?: null,
      unitsBought?: null,
      toolsSpent?: null,
      currentUnits?: null,
      currentTools?: null
    ): UnitsBoughtEventFilter;
  };

  estimateGas: {
    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentZone(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _zoneAddress: string,
      _worldAddress: string,
      _unitsAddress: string,
      _toolsAddress: string,
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastApplyStateTime(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    swapToolsForExactUnits(
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToolsForExactUnitsByZone(
      toolsPayer: string,
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tools(overrides?: CallOverrides): Promise<BigNumber>;

    units(overrides?: CallOverrides): Promise<BigNumber>;

    unitsBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentZone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _zoneAddress: string,
      _worldAddress: string,
      _unitsAddress: string,
      _toolsAddress: string,
      _multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastApplyStateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapToolsForExactUnits(
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToolsForExactUnitsByZone(
      toolsPayer: string,
      settlementAddress: string,
      unitsToBuy: BigNumberish,
      maxToolsToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    units(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unitsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
