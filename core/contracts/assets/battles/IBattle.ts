/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IBattleInterface extends utils.Interface {
  functions: {
    "calculateUserCasualties(address)": FunctionFragment;
    "canExitFromBattle()": FunctionFragment;
    "casualties(bool,string)": FunctionFragment;
    "exitBattle()": FunctionFragment;
    "getLobbyDuration(bool)": FunctionFragment;
    "getOngoingDuration(bool)": FunctionFragment;
    "getSideALength()": FunctionFragment;
    "getSideBLength()": FunctionFragment;
    "initBattle(address,address)": FunctionFragment;
    "isJoinTime()": FunctionFragment;
    "isOnSideA(address)": FunctionFragment;
    "joinBattle(bool)": FunctionFragment;
    "offchainCaller()": FunctionFragment;
    "position()": FunctionFragment;
    "sideA(uint256)": FunctionFragment;
    "sideB(uint256)": FunctionFragment;
    "sideUnitsCount(bool,string)": FunctionFragment;
    "startBattle()": FunctionFragment;
    "timing()": FunctionFragment;
    "userUnitsCount(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateUserCasualties"
      | "canExitFromBattle"
      | "casualties"
      | "exitBattle"
      | "getLobbyDuration"
      | "getOngoingDuration"
      | "getSideALength"
      | "getSideBLength"
      | "initBattle"
      | "isJoinTime"
      | "isOnSideA"
      | "joinBattle"
      | "offchainCaller"
      | "position"
      | "sideA"
      | "sideB"
      | "sideUnitsCount"
      | "startBattle"
      | "timing"
      | "userUnitsCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateUserCasualties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canExitFromBattle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "casualties",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exitBattle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLobbyDuration",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOngoingDuration",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSideALength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSideBLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initBattle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isJoinTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOnSideA", values: [string]): string;
  encodeFunctionData(functionFragment: "joinBattle", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "offchainCaller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "position", values?: undefined): string;
  encodeFunctionData(functionFragment: "sideA", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "sideB", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sideUnitsCount",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startBattle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timing", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userUnitsCount",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateUserCasualties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExitFromBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "casualties", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLobbyDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOngoingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSideALength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSideBLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initBattle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isJoinTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnSideA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offchainCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sideA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sideB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sideUnitsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userUnitsCount",
    data: BytesLike
  ): Result;

  events: {
    "CasualtiesAdded(bool,uint256,uint256)": EventFragment;
    "Finished(uint256,uint256[],uint256[])": EventFragment;
    "Joined(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CasualtiesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
}

export interface CasualtiesAddedEventObject {
  isSideA: boolean;
  unitSpec: BigNumber;
  casualities: BigNumber;
}
export type CasualtiesAddedEvent = TypedEvent<
  [boolean, BigNumber, BigNumber],
  CasualtiesAddedEventObject
>;

export type CasualtiesAddedEventFilter = TypedEventFilter<CasualtiesAddedEvent>;

export interface FinishedEventObject {
  finishTime: BigNumber;
  casualitiesA: BigNumber[];
  casualitiesB: BigNumber[];
}
export type FinishedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  FinishedEventObject
>;

export type FinishedEventFilter = TypedEventFilter<FinishedEvent>;

export interface JoinedEventObject {
  armyAddress: string;
  isSideA: boolean;
}
export type JoinedEvent = TypedEvent<[string, boolean], JoinedEventObject>;

export type JoinedEventFilter = TypedEventFilter<JoinedEvent>;

export interface IBattle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBattleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateUserCasualties(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { unitNames: string[]; unitsCount: BigNumber[] }
    >;

    canExitFromBattle(overrides?: CallOverrides): Promise<[boolean]>;

    casualties(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exitBattle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLobbyDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOngoingDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSideALength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSideBLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    initBattle(
      _worldAddress: string,
      _creatorArmy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isJoinTime(overrides?: CallOverrides): Promise<[boolean]>;

    isOnSideA(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinBattle(
      _isSideA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offchainCaller(overrides?: CallOverrides): Promise<[string]>;

    position(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        continent: BigNumber;
        globalX: number;
        globalY: number;
      }
    >;

    sideA(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    sideB(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    sideUnitsCount(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startBattle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timing(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        creationTime: BigNumber;
        lobbyDuration: BigNumber;
        ongoingDuration: BigNumber;
        finishTime: BigNumber;
      }
    >;

    userUnitsCount(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calculateUserCasualties(
    armyAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { unitNames: string[]; unitsCount: BigNumber[] }
  >;

  canExitFromBattle(overrides?: CallOverrides): Promise<boolean>;

  casualties(
    isSideA: boolean,
    unitName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exitBattle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLobbyDuration(
    isOccultistsAttacked: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOngoingDuration(
    isOccultistsAttacked: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSideALength(overrides?: CallOverrides): Promise<BigNumber>;

  getSideBLength(overrides?: CallOverrides): Promise<BigNumber>;

  initBattle(
    _worldAddress: string,
    _creatorArmy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isJoinTime(overrides?: CallOverrides): Promise<boolean>;

  isOnSideA(armyAddress: string, overrides?: CallOverrides): Promise<boolean>;

  joinBattle(
    _isSideA: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offchainCaller(overrides?: CallOverrides): Promise<string>;

  position(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      continent: BigNumber;
      globalX: number;
      globalY: number;
    }
  >;

  sideA(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  sideB(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  sideUnitsCount(
    isSideA: boolean,
    unitName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startBattle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timing(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      creationTime: BigNumber;
      lobbyDuration: BigNumber;
      ongoingDuration: BigNumber;
      finishTime: BigNumber;
    }
  >;

  userUnitsCount(
    armyAddress: string,
    unitName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculateUserCasualties(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { unitNames: string[]; unitsCount: BigNumber[] }
    >;

    canExitFromBattle(overrides?: CallOverrides): Promise<boolean>;

    casualties(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitBattle(overrides?: CallOverrides): Promise<void>;

    getLobbyDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOngoingDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSideALength(overrides?: CallOverrides): Promise<BigNumber>;

    getSideBLength(overrides?: CallOverrides): Promise<BigNumber>;

    initBattle(
      _worldAddress: string,
      _creatorArmy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isJoinTime(overrides?: CallOverrides): Promise<boolean>;

    isOnSideA(armyAddress: string, overrides?: CallOverrides): Promise<boolean>;

    joinBattle(_isSideA: boolean, overrides?: CallOverrides): Promise<void>;

    offchainCaller(overrides?: CallOverrides): Promise<string>;

    position(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        continent: BigNumber;
        globalX: number;
        globalY: number;
      }
    >;

    sideA(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    sideB(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    sideUnitsCount(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBattle(overrides?: CallOverrides): Promise<void>;

    timing(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        creationTime: BigNumber;
        lobbyDuration: BigNumber;
        ongoingDuration: BigNumber;
        finishTime: BigNumber;
      }
    >;

    userUnitsCount(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CasualtiesAdded(bool,uint256,uint256)"(
      isSideA?: boolean | null,
      unitSpec?: BigNumberish | null,
      casualities?: null
    ): CasualtiesAddedEventFilter;
    CasualtiesAdded(
      isSideA?: boolean | null,
      unitSpec?: BigNumberish | null,
      casualities?: null
    ): CasualtiesAddedEventFilter;

    "Finished(uint256,uint256[],uint256[])"(
      finishTime?: null,
      casualitiesA?: null,
      casualitiesB?: null
    ): FinishedEventFilter;
    Finished(
      finishTime?: null,
      casualitiesA?: null,
      casualitiesB?: null
    ): FinishedEventFilter;

    "Joined(address,bool)"(
      armyAddress?: null,
      isSideA?: null
    ): JoinedEventFilter;
    Joined(armyAddress?: null, isSideA?: null): JoinedEventFilter;
  };

  estimateGas: {
    calculateUserCasualties(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExitFromBattle(overrides?: CallOverrides): Promise<BigNumber>;

    casualties(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitBattle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLobbyDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOngoingDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSideALength(overrides?: CallOverrides): Promise<BigNumber>;

    getSideBLength(overrides?: CallOverrides): Promise<BigNumber>;

    initBattle(
      _worldAddress: string,
      _creatorArmy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isJoinTime(overrides?: CallOverrides): Promise<BigNumber>;

    isOnSideA(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinBattle(
      _isSideA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offchainCaller(overrides?: CallOverrides): Promise<BigNumber>;

    position(overrides?: CallOverrides): Promise<BigNumber>;

    sideA(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sideB(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sideUnitsCount(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBattle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timing(overrides?: CallOverrides): Promise<BigNumber>;

    userUnitsCount(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateUserCasualties(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExitFromBattle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    casualties(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitBattle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLobbyDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOngoingDuration(
      isOccultistsAttacked: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSideALength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSideBLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initBattle(
      _worldAddress: string,
      _creatorArmy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isJoinTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOnSideA(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinBattle(
      _isSideA: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offchainCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    position(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sideA(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sideB(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sideUnitsCount(
      isSideA: boolean,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBattle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userUnitsCount(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
