/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IContinent {
  export type GameTileStruct = { zoneId: BigNumberish; tileType: BigNumberish };

  export type GameTileStructOutput = [number, number] & {
    zoneId: number;
    tileType: number;
  };
}

export interface ContinentInterface extends utils.Interface {
  functions: {
    "assetName()": FunctionFragment;
    "assetType()": FunctionFragment;
    "attachZoneToTheContinent(uint256,uint256)": FunctionFragment;
    "calculatePath(uint32[])": FunctionFragment;
    "continentName()": FunctionFragment;
    "continentTileMap(uint32)": FunctionFragment;
    "createZoneViaArgs(uint16[],uint16[],uint16[])": FunctionFragment;
    "getCoordinates(uint32)": FunctionFragment;
    "getGameTile(uint16,uint16)": FunctionFragment;
    "getNeighborCoordinates(uint16,uint16)": FunctionFragment;
    "getPosition(uint16,uint16)": FunctionFragment;
    "getTileMovingTime(uint8)": FunctionFragment;
    "getZoneTemplatesLength()": FunctionFragment;
    "getZonesLength()": FunctionFragment;
    "init(address,string)": FunctionFragment;
    "isEven(uint16,uint16)": FunctionFragment;
    "isNeighborTo(uint32,uint32)": FunctionFragment;
    "newAssetSettlement(uint256,uint16,uint16,string)": FunctionFragment;
    "newSettlement(uint16,uint16,uint256,uint256)": FunctionFragment;
    "settlements(uint16,uint16)": FunctionFragment;
    "world()": FunctionFragment;
    "zoneTemplates(uint256)": FunctionFragment;
    "zones(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetName"
      | "assetType"
      | "attachZoneToTheContinent"
      | "calculatePath"
      | "continentName"
      | "continentTileMap"
      | "createZoneViaArgs"
      | "getCoordinates"
      | "getGameTile"
      | "getNeighborCoordinates"
      | "getPosition"
      | "getTileMovingTime"
      | "getZoneTemplatesLength"
      | "getZonesLength"
      | "init"
      | "isEven"
      | "isNeighborTo"
      | "newAssetSettlement"
      | "newSettlement"
      | "settlements"
      | "world"
      | "zoneTemplates"
      | "zones"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "assetName", values?: undefined): string;
  encodeFunctionData(functionFragment: "assetType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attachZoneToTheContinent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePath",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "continentName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "continentTileMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createZoneViaArgs",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoordinates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameTile",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNeighborCoordinates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTileMovingTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZoneTemplatesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getZonesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isEven",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNeighborTo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newAssetSettlement",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newSettlement",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlements",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zoneTemplates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zones", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "assetName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attachZoneToTheContinent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "continentName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "continentTileMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createZoneViaArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNeighborCoordinates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTileMovingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZoneTemplatesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZonesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEven", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNeighborTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAssetSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zoneTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zones", data: BytesLike): Result;

  events: {
    "ArmySpawned(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewSettlement(address,string,address,uint16,uint16,uint32)": EventFragment;
    "NewZone(address,uint16[],uint16[],uint16[],uint32[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArmySpawned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSettlement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewZone"): EventFragment;
}

export interface ArmySpawnedEventObject {
  armyAddress: string;
}
export type ArmySpawnedEvent = TypedEvent<[string], ArmySpawnedEventObject>;

export type ArmySpawnedEventFilter = TypedEventFilter<ArmySpawnedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewSettlementEventObject {
  contractAddress: string;
  scriptName: string;
  zoneAddress: string;
  globalX: number;
  globalY: number;
  position: number;
}
export type NewSettlementEvent = TypedEvent<
  [string, string, string, number, number, number],
  NewSettlementEventObject
>;

export type NewSettlementEventFilter = TypedEventFilter<NewSettlementEvent>;

export interface NewZoneEventObject {
  zoneAddress: string;
  coordinatesX: number[];
  coordinatesY: number[];
  tileTypes: number[];
  positions: number[];
}
export type NewZoneEvent = TypedEvent<
  [string, number[], number[], number[], number[]],
  NewZoneEventObject
>;

export type NewZoneEventFilter = TypedEventFilter<NewZoneEvent>;

export interface Continent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContinentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetName(overrides?: CallOverrides): Promise<[string]>;

    assetType(overrides?: CallOverrides): Promise<[string]>;

    attachZoneToTheContinent(
      zoneTemplateId: BigNumberish,
      occultistsCoordinateIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePath(
      path: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    continentName(overrides?: CallOverrides): Promise<[string]>;

    continentTileMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number, number, number] & {
        tile0: number;
        tile1: number;
        tile2: number;
        tile3: number;
        tile4: number;
        tile5: number;
        tile6: number;
        tile7: number;
      }
    >;

    createZoneViaArgs(
      coordinatesX: BigNumberish[],
      coordinatesY: BigNumberish[],
      tileTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCoordinates(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getGameTile(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IContinent.GameTileStructOutput]>;

    getNeighborCoordinates(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[], number[]]>;

    getPosition(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTileMovingTime(
      tileType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getZoneTemplatesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getZonesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _worldAddress: string,
      _continentName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEven(
      x: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNeighborTo(
      position: BigNumberish,
      neighbor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newAssetSettlement(
      ownerTokenId: BigNumberish,
      globalX: BigNumberish,
      globalY: BigNumberish,
      assetName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newSettlement(
      globalX: BigNumberish,
      globalY: BigNumberish,
      ownerTokenId: BigNumberish,
      maxBlessTokensToUse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlements(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    world(overrides?: CallOverrides): Promise<[string]>;

    zoneTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    zones(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  assetName(overrides?: CallOverrides): Promise<string>;

  assetType(overrides?: CallOverrides): Promise<string>;

  attachZoneToTheContinent(
    zoneTemplateId: BigNumberish,
    occultistsCoordinateIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePath(
    path: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  continentName(overrides?: CallOverrides): Promise<string>;

  continentTileMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number, number, number] & {
      tile0: number;
      tile1: number;
      tile2: number;
      tile3: number;
      tile4: number;
      tile5: number;
      tile6: number;
      tile7: number;
    }
  >;

  createZoneViaArgs(
    coordinatesX: BigNumberish[],
    coordinatesY: BigNumberish[],
    tileTypes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCoordinates(
    position: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  getGameTile(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IContinent.GameTileStructOutput>;

  getNeighborCoordinates(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number[], number[]]>;

  getPosition(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getTileMovingTime(
    tileType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getZoneTemplatesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getZonesLength(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _worldAddress: string,
    _continentName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEven(
    x: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNeighborTo(
    position: BigNumberish,
    neighbor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newAssetSettlement(
    ownerTokenId: BigNumberish,
    globalX: BigNumberish,
    globalY: BigNumberish,
    assetName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newSettlement(
    globalX: BigNumberish,
    globalY: BigNumberish,
    ownerTokenId: BigNumberish,
    maxBlessTokensToUse: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlements(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  world(overrides?: CallOverrides): Promise<string>;

  zoneTemplates(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  zones(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assetName(overrides?: CallOverrides): Promise<string>;

    assetType(overrides?: CallOverrides): Promise<string>;

    attachZoneToTheContinent(
      zoneTemplateId: BigNumberish,
      occultistsCoordinateIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePath(
      path: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    continentName(overrides?: CallOverrides): Promise<string>;

    continentTileMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number, number, number] & {
        tile0: number;
        tile1: number;
        tile2: number;
        tile3: number;
        tile4: number;
        tile5: number;
        tile6: number;
        tile7: number;
      }
    >;

    createZoneViaArgs(
      coordinatesX: BigNumberish[],
      coordinatesY: BigNumberish[],
      tileTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCoordinates(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getGameTile(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IContinent.GameTileStructOutput>;

    getNeighborCoordinates(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[], number[]]>;

    getPosition(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getTileMovingTime(
      tileType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZoneTemplatesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getZonesLength(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _worldAddress: string,
      _continentName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isEven(
      x: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNeighborTo(
      position: BigNumberish,
      neighbor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newAssetSettlement(
      ownerTokenId: BigNumberish,
      globalX: BigNumberish,
      globalY: BigNumberish,
      assetName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    newSettlement(
      globalX: BigNumberish,
      globalY: BigNumberish,
      ownerTokenId: BigNumberish,
      maxBlessTokensToUse: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlements(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    world(overrides?: CallOverrides): Promise<string>;

    zoneTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    zones(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ArmySpawned(address)"(armyAddress?: null): ArmySpawnedEventFilter;
    ArmySpawned(armyAddress?: null): ArmySpawnedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewSettlement(address,string,address,uint16,uint16,uint32)"(
      contractAddress?: string | null,
      scriptName?: null,
      zoneAddress?: null,
      globalX?: null,
      globalY?: null,
      position?: null
    ): NewSettlementEventFilter;
    NewSettlement(
      contractAddress?: string | null,
      scriptName?: null,
      zoneAddress?: null,
      globalX?: null,
      globalY?: null,
      position?: null
    ): NewSettlementEventFilter;

    "NewZone(address,uint16[],uint16[],uint16[],uint32[])"(
      zoneAddress?: string | null,
      coordinatesX?: null,
      coordinatesY?: null,
      tileTypes?: null,
      positions?: null
    ): NewZoneEventFilter;
    NewZone(
      zoneAddress?: string | null,
      coordinatesX?: null,
      coordinatesY?: null,
      tileTypes?: null,
      positions?: null
    ): NewZoneEventFilter;
  };

  estimateGas: {
    assetName(overrides?: CallOverrides): Promise<BigNumber>;

    assetType(overrides?: CallOverrides): Promise<BigNumber>;

    attachZoneToTheContinent(
      zoneTemplateId: BigNumberish,
      occultistsCoordinateIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePath(
      path: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    continentName(overrides?: CallOverrides): Promise<BigNumber>;

    continentTileMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createZoneViaArgs(
      coordinatesX: BigNumberish[],
      coordinatesY: BigNumberish[],
      tileTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCoordinates(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameTile(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNeighborCoordinates(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTileMovingTime(
      tileType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZoneTemplatesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getZonesLength(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _worldAddress: string,
      _continentName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEven(
      x: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNeighborTo(
      position: BigNumberish,
      neighbor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newAssetSettlement(
      ownerTokenId: BigNumberish,
      globalX: BigNumberish,
      globalY: BigNumberish,
      assetName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newSettlement(
      globalX: BigNumberish,
      globalY: BigNumberish,
      ownerTokenId: BigNumberish,
      maxBlessTokensToUse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlements(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    world(overrides?: CallOverrides): Promise<BigNumber>;

    zoneTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zones(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assetName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attachZoneToTheContinent(
      zoneTemplateId: BigNumberish,
      occultistsCoordinateIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePath(
      path: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    continentName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    continentTileMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createZoneViaArgs(
      coordinatesX: BigNumberish[],
      coordinatesY: BigNumberish[],
      tileTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCoordinates(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameTile(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNeighborCoordinates(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTileMovingTime(
      tileType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZoneTemplatesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZonesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _worldAddress: string,
      _continentName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEven(
      x: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNeighborTo(
      position: BigNumberish,
      neighbor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newAssetSettlement(
      ownerTokenId: BigNumberish,
      globalX: BigNumberish,
      globalY: BigNumberish,
      assetName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newSettlement(
      globalX: BigNumberish,
      globalY: BigNumberish,
      ownerTokenId: BigNumberish,
      maxBlessTokensToUse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlements(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    world(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zoneTemplates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zones(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
