/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IBuilding {
  export type ProductionResultStruct = {
    resourceName: string;
    balanceChanges: BigNumberish;
    isProducing: boolean;
  };

  export type ProductionResultStructOutput = [string, BigNumber, boolean] & {
    resourceName: string;
    balanceChanges: BigNumber;
    isProducing: boolean;
  };

  export type InitialResourceBlockStruct = {
    resourceName: string;
    perBlock: BigNumberish;
    isProducing: boolean;
  };

  export type InitialResourceBlockStructOutput = [
    string,
    BigNumber,
    boolean
  ] & { resourceName: string; perBlock: BigNumber; isProducing: boolean };
}

export declare namespace Fortification {
  export type FortificationDataStruct = {
    fullHealthProductionSeconds: BigNumberish;
    partialHealthProductionSeconds: BigNumberish;
  };

  export type FortificationDataStructOutput = [BigNumber, BigNumber] & {
    fullHealthProductionSeconds: BigNumber;
    partialHealthProductionSeconds: BigNumber;
  };
}

export interface FortificationInterface extends utils.Interface {
  functions: {
    "MIN_TOP_HOLD()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "applyState()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetName()": FunctionFragment;
    "assetType()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchTransferResources(string[],address,uint256[])": FunctionFragment;
    "buildingName()": FunctionFragment;
    "buildingState()": FunctionFragment;
    "buildingTokenTransferFrom(address,address,address,uint256)": FunctionFragment;
    "burnReserves(uint256)": FunctionFragment;
    "calcCopperUpgradePrice(uint256)": FunctionFragment;
    "calcCumulativeResource(string,uint256)": FunctionFragment;
    "calcMaxWorkers(uint256)": FunctionFragment;
    "calcUpgradePrice(uint256,string)": FunctionFragment;
    "calcUpgradeTime(uint256)": FunctionFragment;
    "calcWoodUpgradePrice(uint256)": FunctionFragment;
    "calculateCumulativeState(uint256)": FunctionFragment;
    "calculateFortificationData()": FunctionFragment;
    "calculateProductionBlocksAmount()": FunctionFragment;
    "currentSettlement()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getBuildingCoefficient(uint256)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getMaxHealthOnLevel(uint256)": FunctionFragment;
    "getMaxReservesByLevel(uint256)": FunctionFragment;
    "getProducingResourceName()": FunctionFragment;
    "getProductionMultiplier()": FunctionFragment;
    "getReserves(uint256)": FunctionFragment;
    "getTopHolders()": FunctionFragment;
    "health()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initBuilding(address,address)": FunctionFragment;
    "isResourceAcceptable(string)": FunctionFragment;
    "level()": FunctionFragment;
    "maxWorkers()": FunctionFragment;
    "name()": FunctionFragment;
    "production()": FunctionFragment;
    "productionChanged()": FunctionFragment;
    "stealReserves(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferResources(string,address,uint256)": FunctionFragment;
    "transferWorkers(address,uint256)": FunctionFragment;
    "updateHealth(uint256)": FunctionFragment;
    "upgradeStart()": FunctionFragment;
    "workers()": FunctionFragment;
    "world()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_TOP_HOLD"
      | "allowance"
      | "applyState"
      | "approve"
      | "assetName"
      | "assetType"
      | "balanceOf"
      | "batchTransferResources"
      | "buildingName"
      | "buildingState"
      | "buildingTokenTransferFrom"
      | "burnReserves"
      | "calcCopperUpgradePrice"
      | "calcCumulativeResource"
      | "calcMaxWorkers"
      | "calcUpgradePrice"
      | "calcUpgradeTime"
      | "calcWoodUpgradePrice"
      | "calculateCumulativeState"
      | "calculateFortificationData"
      | "calculateProductionBlocksAmount"
      | "currentSettlement"
      | "decimals"
      | "decreaseAllowance"
      | "getBuildingCoefficient"
      | "getConfig"
      | "getMaxHealthOnLevel"
      | "getMaxReservesByLevel"
      | "getProducingResourceName"
      | "getProductionMultiplier"
      | "getReserves"
      | "getTopHolders"
      | "health"
      | "increaseAllowance"
      | "initBuilding"
      | "isResourceAcceptable"
      | "level"
      | "maxWorkers"
      | "name"
      | "production"
      | "productionChanged"
      | "stealReserves"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferResources"
      | "transferWorkers"
      | "updateHealth"
      | "upgradeStart"
      | "workers"
      | "world"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_TOP_HOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "applyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assetName", values?: undefined): string;
  encodeFunctionData(functionFragment: "assetType", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchTransferResources",
    values: [string[], string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buildingName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildingState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildingTokenTransferFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCopperUpgradePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCumulativeResource",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMaxWorkers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUpgradePrice",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUpgradeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcWoodUpgradePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCumulativeState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFortificationData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProductionBlocksAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuildingCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxHealthOnLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxReservesByLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducingResourceName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductionMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopHolders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "health", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initBuilding",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isResourceAcceptable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "level", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "production",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionChanged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stealReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferResources",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWorkers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "workers", values?: undefined): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_TOP_HOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingTokenTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCopperUpgradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCumulativeResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMaxWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUpgradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUpgradeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcWoodUpgradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCumulativeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFortificationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProductionBlocksAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuildingCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHealthOnLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxReservesByLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducingResourceName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductionMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initBuilding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResourceAcceptable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxWorkers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "production", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stealReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DistributedToShareHolder(address,string,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MithraeumApplied(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpgradeFinish(uint256,uint256,uint256)": EventFragment;
    "UpgradeStarted()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedToShareHolder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MithraeumApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeFinish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeStarted"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DistributedToShareHolderEventObject {
  buildingAddress: string;
  resourceName: string;
  holder: string;
  amount: BigNumber;
}
export type DistributedToShareHolderEvent = TypedEvent<
  [string, string, string, BigNumber],
  DistributedToShareHolderEventObject
>;

export type DistributedToShareHolderEventFilter =
  TypedEventFilter<DistributedToShareHolderEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MithraeumAppliedEventObject {
  caller: string;
}
export type MithraeumAppliedEvent = TypedEvent<
  [string],
  MithraeumAppliedEventObject
>;

export type MithraeumAppliedEventFilter =
  TypedEventFilter<MithraeumAppliedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpgradeFinishEventObject {
  stateLevel: BigNumber;
  previousMaxProsperity: BigNumber;
  newMaxProsperity: BigNumber;
}
export type UpgradeFinishEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UpgradeFinishEventObject
>;

export type UpgradeFinishEventFilter = TypedEventFilter<UpgradeFinishEvent>;

export interface UpgradeStartedEventObject {}
export type UpgradeStartedEvent = TypedEvent<[], UpgradeStartedEventObject>;

export type UpgradeStartedEventFilter = TypedEventFilter<UpgradeStartedEvent>;

export interface Fortification extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FortificationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_TOP_HOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetName(overrides?: CallOverrides): Promise<[string]>;

    assetType(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buildingName(overrides?: CallOverrides): Promise<[string]>;

    buildingState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        level: BigNumber;
        timeUpgradeFinish: BigNumber;
        upgrading: boolean;
        reserves: BigNumber;
      }
    >;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnReserves(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IBuilding.ProductionResultStructOutput[]] & {
        res: IBuilding.ProductionResultStructOutput[];
      }
    >;

    calculateFortificationData(
      overrides?: CallOverrides
    ): Promise<[Fortification.FortificationDataStructOutput]>;

    calculateProductionBlocksAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentSettlement(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuildingCoefficient(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [IBuilding.InitialResourceBlockStructOutput[]] & {
        initialResourceBlocks: IBuilding.InitialResourceBlockStructOutput[];
      }
    >;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxReservesByLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProducingResourceName(overrides?: CallOverrides): Promise<[string]>;

    getProductionMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTopHolders(overrides?: CallOverrides): Promise<[string[]]>;

    health(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    level(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWorkers(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    production(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastApplyState: BigNumber;
        finishTime: BigNumber;
        extraBlocksAfterFinish: BigNumber;
      }
    >;

    productionChanged(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateHealth(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workers(overrides?: CallOverrides): Promise<[BigNumber]>;

    world(overrides?: CallOverrides): Promise<[string]>;
  };

  MIN_TOP_HOLD(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetName(overrides?: CallOverrides): Promise<string>;

  assetType(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchTransferResources(
    resourcesNames: string[],
    to: string,
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buildingName(overrides?: CallOverrides): Promise<string>;

  buildingState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      level: BigNumber;
      timeUpgradeFinish: BigNumber;
      upgrading: boolean;
      reserves: BigNumber;
    }
  >;

  buildingTokenTransferFrom(
    msgSender: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnReserves(
    burnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcCopperUpgradePrice(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCumulativeResource(
    _resourceName: string,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcMaxWorkers(
    _buildingLevel: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUpgradePrice(
    _level: BigNumberish,
    resourceName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUpgradeTime(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcWoodUpgradePrice(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateCumulativeState(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IBuilding.ProductionResultStructOutput[]>;

  calculateFortificationData(
    overrides?: CallOverrides
  ): Promise<Fortification.FortificationDataStructOutput>;

  calculateProductionBlocksAmount(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentSettlement(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuildingCoefficient(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<IBuilding.InitialResourceBlockStructOutput[]>;

  getMaxHealthOnLevel(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxReservesByLevel(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProducingResourceName(overrides?: CallOverrides): Promise<string>;

  getProductionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getReserves(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTopHolders(overrides?: CallOverrides): Promise<string[]>;

  health(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initBuilding(
    worldAddress: string,
    settlementAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isResourceAcceptable(
    _resourceName: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  level(overrides?: CallOverrides): Promise<BigNumber>;

  maxWorkers(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  production(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastApplyState: BigNumber;
      finishTime: BigNumber;
      extraBlocksAfterFinish: BigNumber;
    }
  >;

  productionChanged(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stealReserves(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferResources(
    resourceName: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWorkers(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateHealth(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeStart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workers(overrides?: CallOverrides): Promise<BigNumber>;

  world(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MIN_TOP_HOLD(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyState(overrides?: CallOverrides): Promise<void>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetName(overrides?: CallOverrides): Promise<string>;

    assetType(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    buildingName(overrides?: CallOverrides): Promise<string>;

    buildingState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        level: BigNumber;
        timeUpgradeFinish: BigNumber;
        upgrading: boolean;
        reserves: BigNumber;
      }
    >;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnReserves(
      burnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IBuilding.ProductionResultStructOutput[]>;

    calculateFortificationData(
      overrides?: CallOverrides
    ): Promise<Fortification.FortificationDataStructOutput>;

    calculateProductionBlocksAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentSettlement(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBuildingCoefficient(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<IBuilding.InitialResourceBlockStructOutput[]>;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxReservesByLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProducingResourceName(overrides?: CallOverrides): Promise<string>;

    getProductionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopHolders(overrides?: CallOverrides): Promise<string[]>;

    health(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    level(overrides?: CallOverrides): Promise<BigNumber>;

    maxWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    production(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastApplyState: BigNumber;
        finishTime: BigNumber;
        extraBlocksAfterFinish: BigNumber;
      }
    >;

    productionChanged(overrides?: CallOverrides): Promise<void>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateHealth(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    upgradeStart(overrides?: CallOverrides): Promise<void>;

    workers(overrides?: CallOverrides): Promise<BigNumber>;

    world(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "DistributedToShareHolder(address,string,address,uint256)"(
      buildingAddress?: null,
      resourceName?: null,
      holder?: null,
      amount?: null
    ): DistributedToShareHolderEventFilter;
    DistributedToShareHolder(
      buildingAddress?: null,
      resourceName?: null,
      holder?: null,
      amount?: null
    ): DistributedToShareHolderEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MithraeumApplied(address)"(caller?: null): MithraeumAppliedEventFilter;
    MithraeumApplied(caller?: null): MithraeumAppliedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpgradeFinish(uint256,uint256,uint256)"(
      stateLevel?: null,
      previousMaxProsperity?: null,
      newMaxProsperity?: null
    ): UpgradeFinishEventFilter;
    UpgradeFinish(
      stateLevel?: null,
      previousMaxProsperity?: null,
      newMaxProsperity?: null
    ): UpgradeFinishEventFilter;

    "UpgradeStarted()"(): UpgradeStartedEventFilter;
    UpgradeStarted(): UpgradeStartedEventFilter;
  };

  estimateGas: {
    MIN_TOP_HOLD(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetName(overrides?: CallOverrides): Promise<BigNumber>;

    assetType(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buildingName(overrides?: CallOverrides): Promise<BigNumber>;

    buildingState(overrides?: CallOverrides): Promise<BigNumber>;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnReserves(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFortificationData(overrides?: CallOverrides): Promise<BigNumber>;

    calculateProductionBlocksAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuildingCoefficient(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxReservesByLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProducingResourceName(overrides?: CallOverrides): Promise<BigNumber>;

    getProductionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopHolders(overrides?: CallOverrides): Promise<BigNumber>;

    health(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    level(overrides?: CallOverrides): Promise<BigNumber>;

    maxWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    production(overrides?: CallOverrides): Promise<BigNumber>;

    productionChanged(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateHealth(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workers(overrides?: CallOverrides): Promise<BigNumber>;

    world(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_TOP_HOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buildingName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildingState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnReserves(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFortificationData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateProductionBlocksAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSettlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuildingCoefficient(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxReservesByLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProducingResourceName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductionMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopHolders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    health(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWorkers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    production(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    productionChanged(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateHealth(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    world(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
