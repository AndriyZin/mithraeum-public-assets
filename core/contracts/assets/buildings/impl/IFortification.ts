/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace IBuilding {
  export type ProductionResultStruct = {
    resourceName: string;
    balanceChanges: BigNumberish;
    isProducing: boolean;
  };

  export type ProductionResultStructOutput = [string, BigNumber, boolean] & {
    resourceName: string;
    balanceChanges: BigNumber;
    isProducing: boolean;
  };

  export type InitialResourceBlockStruct = {
    resourceName: string;
    perBlock: BigNumberish;
    isProducing: boolean;
  };

  export type InitialResourceBlockStructOutput = [
    string,
    BigNumber,
    boolean
  ] & { resourceName: string; perBlock: BigNumber; isProducing: boolean };
}

export interface IFortificationInterface extends utils.Interface {
  functions: {
    "applyState()": FunctionFragment;
    "batchTransferResources(string[],address,uint256[])": FunctionFragment;
    "buildingName()": FunctionFragment;
    "buildingState()": FunctionFragment;
    "buildingTokenTransferFrom(address,address,address,uint256)": FunctionFragment;
    "burnReserves(uint256)": FunctionFragment;
    "calcCopperUpgradePrice(uint256)": FunctionFragment;
    "calcCumulativeResource(string,uint256)": FunctionFragment;
    "calcMaxWorkers(uint256)": FunctionFragment;
    "calcUpgradePrice(uint256,string)": FunctionFragment;
    "calcUpgradeTime(uint256)": FunctionFragment;
    "calcWoodUpgradePrice(uint256)": FunctionFragment;
    "calculateCumulativeState(uint256)": FunctionFragment;
    "currentSettlement()": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getMaxHealthOnLevel(uint256)": FunctionFragment;
    "getProducingResourceName()": FunctionFragment;
    "getReserves(uint256)": FunctionFragment;
    "health()": FunctionFragment;
    "initBuilding(address,address)": FunctionFragment;
    "isResourceAcceptable(string)": FunctionFragment;
    "level()": FunctionFragment;
    "maxWorkers()": FunctionFragment;
    "production()": FunctionFragment;
    "productionChanged()": FunctionFragment;
    "stealReserves(address,uint256)": FunctionFragment;
    "transferResources(string,address,uint256)": FunctionFragment;
    "transferWorkers(address,uint256)": FunctionFragment;
    "updateHealth(uint256)": FunctionFragment;
    "upgradeStart()": FunctionFragment;
    "workers()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyState"
      | "batchTransferResources"
      | "buildingName"
      | "buildingState"
      | "buildingTokenTransferFrom"
      | "burnReserves"
      | "calcCopperUpgradePrice"
      | "calcCumulativeResource"
      | "calcMaxWorkers"
      | "calcUpgradePrice"
      | "calcUpgradeTime"
      | "calcWoodUpgradePrice"
      | "calculateCumulativeState"
      | "currentSettlement"
      | "getConfig"
      | "getMaxHealthOnLevel"
      | "getProducingResourceName"
      | "getReserves"
      | "health"
      | "initBuilding"
      | "isResourceAcceptable"
      | "level"
      | "maxWorkers"
      | "production"
      | "productionChanged"
      | "stealReserves"
      | "transferResources"
      | "transferWorkers"
      | "updateHealth"
      | "upgradeStart"
      | "workers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferResources",
    values: [string[], string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buildingName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildingState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildingTokenTransferFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCopperUpgradePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCumulativeResource",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMaxWorkers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUpgradePrice",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUpgradeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcWoodUpgradePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCumulativeState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxHealthOnLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducingResourceName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "health", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initBuilding",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isResourceAcceptable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "level", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "production",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "productionChanged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stealReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferResources",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWorkers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "workers", values?: undefined): string;

  decodeFunctionResult(functionFragment: "applyState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingTokenTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCopperUpgradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCumulativeResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMaxWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUpgradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUpgradeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcWoodUpgradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCumulativeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHealthOnLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducingResourceName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initBuilding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResourceAcceptable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxWorkers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "production", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productionChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stealReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;

  events: {
    "DistributedToShareHolder(address,string,address,uint256)": EventFragment;
    "MithraeumApplied(address)": EventFragment;
    "UpgradeFinish(uint256,uint256,uint256)": EventFragment;
    "UpgradeStarted()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributedToShareHolder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MithraeumApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeFinish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeStarted"): EventFragment;
}

export interface DistributedToShareHolderEventObject {
  buildingAddress: string;
  resourceName: string;
  holder: string;
  amount: BigNumber;
}
export type DistributedToShareHolderEvent = TypedEvent<
  [string, string, string, BigNumber],
  DistributedToShareHolderEventObject
>;

export type DistributedToShareHolderEventFilter =
  TypedEventFilter<DistributedToShareHolderEvent>;

export interface MithraeumAppliedEventObject {
  caller: string;
}
export type MithraeumAppliedEvent = TypedEvent<
  [string],
  MithraeumAppliedEventObject
>;

export type MithraeumAppliedEventFilter =
  TypedEventFilter<MithraeumAppliedEvent>;

export interface UpgradeFinishEventObject {
  stateLevel: BigNumber;
  previousMaxProsperity: BigNumber;
  newMaxProsperity: BigNumber;
}
export type UpgradeFinishEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  UpgradeFinishEventObject
>;

export type UpgradeFinishEventFilter = TypedEventFilter<UpgradeFinishEvent>;

export interface UpgradeStartedEventObject {}
export type UpgradeStartedEvent = TypedEvent<[], UpgradeStartedEventObject>;

export type UpgradeStartedEventFilter = TypedEventFilter<UpgradeStartedEvent>;

export interface IFortification extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFortificationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buildingName(overrides?: CallOverrides): Promise<[string]>;

    buildingState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        level: BigNumber;
        timeUpgradeFinish: BigNumber;
        upgrading: boolean;
        reserves: BigNumber;
      }
    >;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnReserves(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IBuilding.ProductionResultStructOutput[]]>;

    currentSettlement(overrides?: CallOverrides): Promise<[string]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [IBuilding.InitialResourceBlockStructOutput[]] & {
        initialResourceBlocks: IBuilding.InitialResourceBlockStructOutput[];
      }
    >;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProducingResourceName(overrides?: CallOverrides): Promise<[string]>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    health(overrides?: CallOverrides): Promise<[BigNumber]>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    level(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWorkers(overrides?: CallOverrides): Promise<[BigNumber]>;

    production(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastApplyState: BigNumber;
        finishTime: BigNumber;
        extraBlocksAfterFinish: BigNumber;
      }
    >;

    productionChanged(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateHealth(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workers(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  applyState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransferResources(
    resourcesNames: string[],
    to: string,
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buildingName(overrides?: CallOverrides): Promise<string>;

  buildingState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      level: BigNumber;
      timeUpgradeFinish: BigNumber;
      upgrading: boolean;
      reserves: BigNumber;
    }
  >;

  buildingTokenTransferFrom(
    msgSender: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnReserves(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcCopperUpgradePrice(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCumulativeResource(
    _resourceName: string,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcMaxWorkers(
    _buildingLevel: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUpgradePrice(
    _level: BigNumberish,
    resourceName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUpgradeTime(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcWoodUpgradePrice(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateCumulativeState(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IBuilding.ProductionResultStructOutput[]>;

  currentSettlement(overrides?: CallOverrides): Promise<string>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<IBuilding.InitialResourceBlockStructOutput[]>;

  getMaxHealthOnLevel(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProducingResourceName(overrides?: CallOverrides): Promise<string>;

  getReserves(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  health(overrides?: CallOverrides): Promise<BigNumber>;

  initBuilding(
    worldAddress: string,
    settlementAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isResourceAcceptable(
    _resourceName: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  level(overrides?: CallOverrides): Promise<BigNumber>;

  maxWorkers(overrides?: CallOverrides): Promise<BigNumber>;

  production(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastApplyState: BigNumber;
      finishTime: BigNumber;
      extraBlocksAfterFinish: BigNumber;
    }
  >;

  productionChanged(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stealReserves(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferResources(
    resourceName: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWorkers(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateHealth(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeStart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workers(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    applyState(overrides?: CallOverrides): Promise<void>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    buildingName(overrides?: CallOverrides): Promise<string>;

    buildingState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        level: BigNumber;
        timeUpgradeFinish: BigNumber;
        upgrading: boolean;
        reserves: BigNumber;
      }
    >;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnReserves(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IBuilding.ProductionResultStructOutput[]>;

    currentSettlement(overrides?: CallOverrides): Promise<string>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<IBuilding.InitialResourceBlockStructOutput[]>;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProducingResourceName(overrides?: CallOverrides): Promise<string>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(overrides?: CallOverrides): Promise<BigNumber>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    level(overrides?: CallOverrides): Promise<BigNumber>;

    maxWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    production(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastApplyState: BigNumber;
        finishTime: BigNumber;
        extraBlocksAfterFinish: BigNumber;
      }
    >;

    productionChanged(overrides?: CallOverrides): Promise<void>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateHealth(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    upgradeStart(overrides?: CallOverrides): Promise<void>;

    workers(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DistributedToShareHolder(address,string,address,uint256)"(
      buildingAddress?: null,
      resourceName?: null,
      holder?: null,
      amount?: null
    ): DistributedToShareHolderEventFilter;
    DistributedToShareHolder(
      buildingAddress?: null,
      resourceName?: null,
      holder?: null,
      amount?: null
    ): DistributedToShareHolderEventFilter;

    "MithraeumApplied(address)"(caller?: null): MithraeumAppliedEventFilter;
    MithraeumApplied(caller?: null): MithraeumAppliedEventFilter;

    "UpgradeFinish(uint256,uint256,uint256)"(
      stateLevel?: null,
      previousMaxProsperity?: null,
      newMaxProsperity?: null
    ): UpgradeFinishEventFilter;
    UpgradeFinish(
      stateLevel?: null,
      previousMaxProsperity?: null,
      newMaxProsperity?: null
    ): UpgradeFinishEventFilter;

    "UpgradeStarted()"(): UpgradeStartedEventFilter;
    UpgradeStarted(): UpgradeStartedEventFilter;
  };

  estimateGas: {
    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buildingName(overrides?: CallOverrides): Promise<BigNumber>;

    buildingState(overrides?: CallOverrides): Promise<BigNumber>;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnReserves(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProducingResourceName(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(overrides?: CallOverrides): Promise<BigNumber>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    level(overrides?: CallOverrides): Promise<BigNumber>;

    maxWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    production(overrides?: CallOverrides): Promise<BigNumber>;

    productionChanged(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateHealth(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workers(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    applyState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferResources(
      resourcesNames: string[],
      to: string,
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buildingName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildingState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buildingTokenTransferFrom(
      msgSender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnReserves(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcCopperUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCumulativeResource(
      _resourceName: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcMaxWorkers(
      _buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUpgradePrice(
      _level: BigNumberish,
      resourceName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUpgradeTime(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcWoodUpgradePrice(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCumulativeState(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSettlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxHealthOnLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProducingResourceName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    health(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initBuilding(
      worldAddress: string,
      settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isResourceAcceptable(
      _resourceName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWorkers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    production(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    productionChanged(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stealReserves(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferResources(
      resourceName: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWorkers(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateHealth(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
