/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ISiegeInterface extends utils.Interface {
  functions: {
    "addUnits(string[],uint256[])": FunctionFragment;
    "armyInfo(address)": FunctionFragment;
    "armyLiquidationStartTime(address)": FunctionFragment;
    "calculateTotalSiegeStats()": FunctionFragment;
    "canLiquidate(address)": FunctionFragment;
    "checkLiquidation()": FunctionFragment;
    "claimResources(address,uint256)": FunctionFragment;
    "currentSettlement()": FunctionFragment;
    "getLiquidationUnits(address)": FunctionFragment;
    "getStoredUnits(address)": FunctionFragment;
    "getTotalDamageByPeriod(uint256)": FunctionFragment;
    "getTotalDamageLastPeriod()": FunctionFragment;
    "getUserPointsOnTime(address,uint256)": FunctionFragment;
    "initSiege(address,address)": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "liquidationPoints(address)": FunctionFragment;
    "pointsPerShare()": FunctionFragment;
    "returnUnitsToArmy(address,string,uint256)": FunctionFragment;
    "storedUnits(address,string)": FunctionFragment;
    "systemUpdate(uint256)": FunctionFragment;
    "update()": FunctionFragment;
    "withdrawUnits(string[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addUnits"
      | "armyInfo"
      | "armyLiquidationStartTime"
      | "calculateTotalSiegeStats"
      | "canLiquidate"
      | "checkLiquidation"
      | "claimResources"
      | "currentSettlement"
      | "getLiquidationUnits"
      | "getStoredUnits"
      | "getTotalDamageByPeriod"
      | "getTotalDamageLastPeriod"
      | "getUserPointsOnTime"
      | "initSiege"
      | "lastUpdate"
      | "liquidationPoints"
      | "pointsPerShare"
      | "returnUnitsToArmy"
      | "storedUnits"
      | "systemUpdate"
      | "update"
      | "withdrawUnits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUnits",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "armyInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "armyLiquidationStartTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalSiegeStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimResources",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationUnits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredUnits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDamageByPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDamageLastPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPointsOnTime",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initSiege",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnUnitsToArmy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedUnits",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "systemUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawUnits",
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "addUnits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "armyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "armyLiquidationStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalSiegeStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDamageByPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDamageLastPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPointsOnTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initSiege", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnUnitsToArmy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnits",
    data: BytesLike
  ): Result;

  events: {
    "Liquidated(address,string,uint256,uint256)": EventFragment;
    "PointsReceived(address,uint256)": EventFragment;
    "PointsSpent(address,uint256)": EventFragment;
    "UnitsAdded(address,address,string[],uint256[])": EventFragment;
    "UnitsWithdrawn(address,address,string[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PointsSpent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnitsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnitsWithdrawn"): EventFragment;
}

export interface LiquidatedEventObject {
  armyAddress: string;
  unitName: string;
  unitsLiquidated: BigNumber;
  unitsWithdrawn: BigNumber;
}
export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LiquidatedEventObject
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export interface PointsReceivedEventObject {
  armyAddress: string;
  pointsReceived: BigNumber;
}
export type PointsReceivedEvent = TypedEvent<
  [string, BigNumber],
  PointsReceivedEventObject
>;

export type PointsReceivedEventFilter = TypedEventFilter<PointsReceivedEvent>;

export interface PointsSpentEventObject {
  armyAddress: string;
  pointsSpent: BigNumber;
}
export type PointsSpentEvent = TypedEvent<
  [string, BigNumber],
  PointsSpentEventObject
>;

export type PointsSpentEventFilter = TypedEventFilter<PointsSpentEvent>;

export interface UnitsAddedEventObject {
  from: string;
  settlement: string;
  unitsNames: string[];
  unitsCount: BigNumber[];
}
export type UnitsAddedEvent = TypedEvent<
  [string, string, string[], BigNumber[]],
  UnitsAddedEventObject
>;

export type UnitsAddedEventFilter = TypedEventFilter<UnitsAddedEvent>;

export interface UnitsWithdrawnEventObject {
  to: string;
  settlement: string;
  unitsNames: string[];
  unitsCount: BigNumber[];
}
export type UnitsWithdrawnEvent = TypedEvent<
  [string, string, string[], BigNumber[]],
  UnitsWithdrawnEventObject
>;

export type UnitsWithdrawnEventFilter = TypedEventFilter<UnitsWithdrawnEvent>;

export interface ISiege extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISiegeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    armyInfo(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rewardDebt: BigNumber; points: BigNumber }
    >;

    armyLiquidationStartTime(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTotalSiegeStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _power: BigNumber; _supply: BigNumber }
    >;

    canLiquidate(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimResources(
      buildingAddress: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentSettlement(overrides?: CallOverrides): Promise<[string]>;

    getLiquidationUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { res: BigNumber[] }>;

    getStoredUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { res: BigNumber[] }>;

    getTotalDamageByPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDamageLastPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserPointsOnTime(
      _armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initSiege(
      _worldAddress: string,
      _settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationPoints(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; spendTime: BigNumber }
    >;

    pointsPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnUnitsToArmy(
      _to: string,
      _unitName: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storedUnits(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    systemUpdate(
      _totalDamage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addUnits(
    _unitsNames: string[],
    _unitsCount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  armyInfo(
    armyAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rewardDebt: BigNumber; points: BigNumber }
  >;

  armyLiquidationStartTime(
    armyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalSiegeStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _power: BigNumber; _supply: BigNumber }
  >;

  canLiquidate(
    _armyAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkLiquidation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimResources(
    buildingAddress: string,
    _points: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentSettlement(overrides?: CallOverrides): Promise<string>;

  getLiquidationUnits(
    _armyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getStoredUnits(
    _armyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalDamageByPeriod(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDamageLastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getUserPointsOnTime(
    _armyAddress: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initSiege(
    _worldAddress: string,
    _settlementAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationPoints(
    armyAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; spendTime: BigNumber }
  >;

  pointsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  returnUnitsToArmy(
    _to: string,
    _unitName: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storedUnits(
    armyAddress: string,
    unitName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  systemUpdate(
    _totalDamage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnits(
    _unitsNames: string[],
    _unitsCount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    armyInfo(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rewardDebt: BigNumber; points: BigNumber }
    >;

    armyLiquidationStartTime(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalSiegeStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _power: BigNumber; _supply: BigNumber }
    >;

    canLiquidate(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkLiquidation(overrides?: CallOverrides): Promise<void>;

    claimResources(
      buildingAddress: string,
      _points: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentSettlement(overrides?: CallOverrides): Promise<string>;

    getLiquidationUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getStoredUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalDamageByPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDamageLastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPointsOnTime(
      _armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initSiege(
      _worldAddress: string,
      _settlementAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationPoints(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; spendTime: BigNumber }
    >;

    pointsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    returnUnitsToArmy(
      _to: string,
      _unitName: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storedUnits(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemUpdate(
      _totalDamage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update(overrides?: CallOverrides): Promise<void>;

    withdrawUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Liquidated(address,string,uint256,uint256)"(
      armyAddress?: null,
      unitName?: null,
      unitsLiquidated?: null,
      unitsWithdrawn?: null
    ): LiquidatedEventFilter;
    Liquidated(
      armyAddress?: null,
      unitName?: null,
      unitsLiquidated?: null,
      unitsWithdrawn?: null
    ): LiquidatedEventFilter;

    "PointsReceived(address,uint256)"(
      armyAddress?: string | null,
      pointsReceived?: null
    ): PointsReceivedEventFilter;
    PointsReceived(
      armyAddress?: string | null,
      pointsReceived?: null
    ): PointsReceivedEventFilter;

    "PointsSpent(address,uint256)"(
      armyAddress?: string | null,
      pointsSpent?: null
    ): PointsSpentEventFilter;
    PointsSpent(
      armyAddress?: string | null,
      pointsSpent?: null
    ): PointsSpentEventFilter;

    "UnitsAdded(address,address,string[],uint256[])"(
      from?: string | null,
      settlement?: string | null,
      unitsNames?: null,
      unitsCount?: null
    ): UnitsAddedEventFilter;
    UnitsAdded(
      from?: string | null,
      settlement?: string | null,
      unitsNames?: null,
      unitsCount?: null
    ): UnitsAddedEventFilter;

    "UnitsWithdrawn(address,address,string[],uint256[])"(
      to?: string | null,
      settlement?: string | null,
      unitsNames?: null,
      unitsCount?: null
    ): UnitsWithdrawnEventFilter;
    UnitsWithdrawn(
      to?: string | null,
      settlement?: string | null,
      unitsNames?: null,
      unitsCount?: null
    ): UnitsWithdrawnEventFilter;
  };

  estimateGas: {
    addUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    armyInfo(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    armyLiquidationStartTime(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalSiegeStats(overrides?: CallOverrides): Promise<BigNumber>;

    canLiquidate(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimResources(
      buildingAddress: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDamageByPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDamageLastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPointsOnTime(
      _armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initSiege(
      _worldAddress: string,
      _settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationPoints(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    returnUnitsToArmy(
      _to: string,
      _unitName: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storedUnits(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    systemUpdate(
      _totalDamage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    armyInfo(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    armyLiquidationStartTime(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalSiegeStats(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canLiquidate(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimResources(
      buildingAddress: string,
      _points: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentSettlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStoredUnits(
      _armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDamageByPeriod(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDamageLastPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPointsOnTime(
      _armyAddress: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initSiege(
      _worldAddress: string,
      _settlementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationPoints(
      armyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointsPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnUnitsToArmy(
      _to: string,
      _unitName: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storedUnits(
      armyAddress: string,
      unitName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemUpdate(
      _totalDamage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnits(
      _unitsNames: string[],
      _unitsCount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
