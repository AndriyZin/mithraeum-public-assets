/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FacetVerifierInterface extends ethers.utils.Interface {
  functions: {
    "existedFacets(address)": FunctionFragment;
    "existedName(string)": FunctionFragment;
    "facets(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "newFacet(address,string,address)": FunctionFragment;
    "addNewFacetVersion(uint256,address)": FunctionFragment;
    "batchVerifyFacet(uint256[],uint256[],uint8[],string[])": FunctionFragment;
    "verifyFacet(uint256,uint256,uint8,string)": FunctionFragment;
    "setFacetActive(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "existedFacets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "existedName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "facets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newFacet",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewFacetVersion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVerifyFacet",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFacet",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFacetActive",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "existedFacets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existedName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newFacet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNewFacetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVerifyFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFacetActive",
    data: BytesLike
  ): Result;

  events: {
    "FacetIsActiveChanged(uint256,bool)": EventFragment;
    "FacetUpdated(uint256,uint256,address,uint256,string)": EventFragment;
    "NewFacet(uint256,address,address,string,string)": EventFragment;
    "NewFacetVersion(uint256,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FacetIsActiveChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FacetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFacet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFacetVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FacetIsActiveChangedEvent = TypedEvent<
  [BigNumber, boolean] & { facetIndex: BigNumber; isActive: boolean }
>;

export type FacetUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string] & {
    facetIndex: BigNumber;
    facetVersion: BigNumber;
    facetAddress: string;
    status: BigNumber;
    reason: string;
  }
>;

export type NewFacetEvent = TypedEvent<
  [BigNumber, string, string, string, string] & {
    facetIndex: BigNumber;
    facetAddress: string;
    manager: string;
    name: string;
    configURL: string;
  }
>;

export type NewFacetVersionEvent = TypedEvent<
  [BigNumber, string, string] & {
    facetIndex: BigNumber;
    facetAddress: string;
    configURL: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FacetVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FacetVerifierInterface;

  functions: {
    existedFacets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    existedName(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    facets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isActive: boolean; manager: string }>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newFacet(
      _manager: string,
      name: string,
      _facetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNewFacetVersion(
      _facetIndex: BigNumberish,
      _facetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchVerifyFacet(
      _facetIndexes: BigNumberish[],
      _facetVersions: BigNumberish[],
      _statuses: BigNumberish[],
      _reasons: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyFacet(
      _facetIndex: BigNumberish,
      _facetVersion: BigNumberish,
      _status: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFacetActive(
      _facetIndex: BigNumberish,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  existedFacets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  existedName(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  facets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { isActive: boolean; manager: string }>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newFacet(
    _manager: string,
    name: string,
    _facetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNewFacetVersion(
    _facetIndex: BigNumberish,
    _facetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchVerifyFacet(
    _facetIndexes: BigNumberish[],
    _facetVersions: BigNumberish[],
    _statuses: BigNumberish[],
    _reasons: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyFacet(
    _facetIndex: BigNumberish,
    _facetVersion: BigNumberish,
    _status: BigNumberish,
    _reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFacetActive(
    _facetIndex: BigNumberish,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    existedFacets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    existedName(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    facets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isActive: boolean; manager: string }>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newFacet(
      _manager: string,
      name: string,
      _facetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewFacetVersion(
      _facetIndex: BigNumberish,
      _facetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchVerifyFacet(
      _facetIndexes: BigNumberish[],
      _facetVersions: BigNumberish[],
      _statuses: BigNumberish[],
      _reasons: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyFacet(
      _facetIndex: BigNumberish,
      _facetVersion: BigNumberish,
      _status: BigNumberish,
      _reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFacetActive(
      _facetIndex: BigNumberish,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FacetIsActiveChanged(uint256,bool)"(
      facetIndex?: BigNumberish | null,
      isActive?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { facetIndex: BigNumber; isActive: boolean }
    >;

    FacetIsActiveChanged(
      facetIndex?: BigNumberish | null,
      isActive?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { facetIndex: BigNumber; isActive: boolean }
    >;

    "FacetUpdated(uint256,uint256,address,uint256,string)"(
      facetIndex?: BigNumberish | null,
      facetVersion?: BigNumberish | null,
      facetAddress?: string | null,
      status?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, string],
      {
        facetIndex: BigNumber;
        facetVersion: BigNumber;
        facetAddress: string;
        status: BigNumber;
        reason: string;
      }
    >;

    FacetUpdated(
      facetIndex?: BigNumberish | null,
      facetVersion?: BigNumberish | null,
      facetAddress?: string | null,
      status?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, string],
      {
        facetIndex: BigNumber;
        facetVersion: BigNumber;
        facetAddress: string;
        status: BigNumber;
        reason: string;
      }
    >;

    "NewFacet(uint256,address,address,string,string)"(
      facetIndex?: BigNumberish | null,
      facetAddress?: string | null,
      manager?: null,
      name?: null,
      configURL?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        facetIndex: BigNumber;
        facetAddress: string;
        manager: string;
        name: string;
        configURL: string;
      }
    >;

    NewFacet(
      facetIndex?: BigNumberish | null,
      facetAddress?: string | null,
      manager?: null,
      name?: null,
      configURL?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        facetIndex: BigNumber;
        facetAddress: string;
        manager: string;
        name: string;
        configURL: string;
      }
    >;

    "NewFacetVersion(uint256,address,string)"(
      facetIndex?: BigNumberish | null,
      facetAddress?: string | null,
      configURL?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { facetIndex: BigNumber; facetAddress: string; configURL: string }
    >;

    NewFacetVersion(
      facetIndex?: BigNumberish | null,
      facetAddress?: string | null,
      configURL?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { facetIndex: BigNumber; facetAddress: string; configURL: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    existedFacets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    existedName(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    facets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newFacet(
      _manager: string,
      name: string,
      _facetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNewFacetVersion(
      _facetIndex: BigNumberish,
      _facetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchVerifyFacet(
      _facetIndexes: BigNumberish[],
      _facetVersions: BigNumberish[],
      _statuses: BigNumberish[],
      _reasons: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyFacet(
      _facetIndex: BigNumberish,
      _facetVersion: BigNumberish,
      _status: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFacetActive(
      _facetIndex: BigNumberish,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    existedFacets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    existedName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newFacet(
      _manager: string,
      name: string,
      _facetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNewFacetVersion(
      _facetIndex: BigNumberish,
      _facetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchVerifyFacet(
      _facetIndexes: BigNumberish[],
      _facetVersions: BigNumberish[],
      _statuses: BigNumberish[],
      _reasons: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyFacet(
      _facetIndex: BigNumberish,
      _facetVersion: BigNumberish,
      _status: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFacetActive(
      _facetIndex: BigNumberish,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
