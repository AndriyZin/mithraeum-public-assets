/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBuildingInterface extends ethers.utils.Interface {
  functions: {
    "getConfig(address)": FunctionFragment;
    "buildingTokenTransferFrom(address,address,uint256)": FunctionFragment;
    "stealReserves(uint256,address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getMaxReserves(uint256)": FunctionFragment;
    "getReserves(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getConfig", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buildingTokenTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stealReserves",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMaxReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildingTokenTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stealReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBuilding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBuildingInterface;

  functions: {
    getConfig(
      world: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, boolean] & {
          resourceId: BigNumber;
          perBlock: BigNumber;
          isProducing: boolean;
        })[]
      ] & {
        initialResourceBlocks: ([BigNumber, BigNumber, boolean] & {
          resourceId: BigNumber;
          perBlock: BigNumber;
          isProducing: boolean;
        })[];
      }
    >;

    buildingTokenTransferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stealReserves(
      resourceId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getConfig(
    world: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, boolean] & {
      resourceId: BigNumber;
      perBlock: BigNumber;
      isProducing: boolean;
    })[]
  >;

  buildingTokenTransferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stealReserves(
    resourceId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMaxReserves(
    resourceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserves(
    resourceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getConfig(
      world: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, boolean] & {
        resourceId: BigNumber;
        perBlock: BigNumber;
        isProducing: boolean;
      })[]
    >;

    buildingTokenTransferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stealReserves(
      resourceId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMaxReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getConfig(world: string, overrides?: CallOverrides): Promise<BigNumber>;

    buildingTokenTransferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stealReserves(
      resourceId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMaxReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConfig(
      world: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildingTokenTransferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stealReserves(
      resourceId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      resourceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
