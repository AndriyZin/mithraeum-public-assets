/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OfferProtocolInterface extends ethers.utils.Interface {
  functions: {
    "getAllowedExternalFunctions()": FunctionFragment;
    "getCallbackSelector()": FunctionFragment;
    "getContent()": FunctionFragment;
    "getFunctionSelectors()": FunctionFragment;
    "getRequiredSelectors()": FunctionFragment;
    "uses(bytes32)": FunctionFragment;
    "executeOffer(tuple,tuple,tuple[])": FunctionFragment;
    "getPlaceholderById(uint256)": FunctionFragment;
    "checkSignature(tuple,tuple)": FunctionFragment;
    "getOfferHash(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllowedExternalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallbackSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunctionSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uses", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "executeOffer",
    values: [
      {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      { v: BigNumberish; r: BytesLike; s: BytesLike },
      { placeholders: { offset: BigNumberish; replace: BytesLike }[] }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlaceholderById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [
      {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      { v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferHash",
    values: [
      {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllowedExternalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallbackSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlaceholderById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferHash",
    data: BytesLike
  ): Result;

  events: {
    "NewContent(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewContent"): EventFragment;
}

export type NewContentEvent = TypedEvent<[string] & { content: string }>;

export class OfferProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OfferProtocolInterface;

  functions: {
    getAllowedExternalFunctions(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    getCallbackSelector(overrides?: CallOverrides): Promise<[string]>;

    getContent(overrides?: CallOverrides): Promise<[string]>;

    getFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    getRequiredSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    uses(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    executeOffer(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      _placeholderTransactions: {
        placeholders: { offset: BigNumberish; replace: BytesLike }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPlaceholderById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkSignature(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getOfferHash(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;
  };

  getAllowedExternalFunctions(overrides?: CallOverrides): Promise<string[]>;

  getCallbackSelector(overrides?: CallOverrides): Promise<string>;

  getContent(overrides?: CallOverrides): Promise<string>;

  getFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

  getRequiredSelectors(overrides?: CallOverrides): Promise<string[]>;

  uses(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  executeOffer(
    _offer: {
      metaTransactions: {
        isCreator: boolean;
        to: string;
        value: BigNumberish;
        data: BytesLike;
      }[];
      creator: string;
      reciever: string;
      expireTime: BigNumberish;
      numberOfUses: BigNumberish;
    },
    _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
    _placeholderTransactions: {
      placeholders: { offset: BigNumberish; replace: BytesLike }[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPlaceholderById(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  checkSignature(
    _offer: {
      metaTransactions: {
        isCreator: boolean;
        to: string;
        value: BigNumberish;
        data: BytesLike;
      }[];
      creator: string;
      reciever: string;
      expireTime: BigNumberish;
      numberOfUses: BigNumberish;
    },
    _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
    overrides?: CallOverrides
  ): Promise<boolean>;

  getOfferHash(
    _offer: {
      metaTransactions: {
        isCreator: boolean;
        to: string;
        value: BigNumberish;
        data: BytesLike;
      }[];
      creator: string;
      reciever: string;
      expireTime: BigNumberish;
      numberOfUses: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getAllowedExternalFunctions(overrides?: CallOverrides): Promise<string[]>;

    getCallbackSelector(overrides?: CallOverrides): Promise<string>;

    getContent(overrides?: CallOverrides): Promise<string>;

    getFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

    getRequiredSelectors(overrides?: CallOverrides): Promise<string[]>;

    uses(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    executeOffer(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      _placeholderTransactions: {
        placeholders: { offset: BigNumberish; replace: BytesLike }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPlaceholderById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    checkSignature(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOfferHash(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewContent(string)"(
      content?: null
    ): TypedEventFilter<[string], { content: string }>;

    NewContent(content?: null): TypedEventFilter<[string], { content: string }>;
  };

  estimateGas: {
    getAllowedExternalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    getCallbackSelector(overrides?: CallOverrides): Promise<BigNumber>;

    getContent(overrides?: CallOverrides): Promise<BigNumber>;

    getFunctionSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    uses(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    executeOffer(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      _placeholderTransactions: {
        placeholders: { offset: BigNumberish; replace: BytesLike }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPlaceholderById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSignature(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferHash(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllowedExternalFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCallbackSelector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uses(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeOffer(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      _placeholderTransactions: {
        placeholders: { offset: BigNumberish; replace: BytesLike }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPlaceholderById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSignature(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      _signature: { v: BigNumberish; r: BytesLike; s: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferHash(
      _offer: {
        metaTransactions: {
          isCreator: boolean;
          to: string;
          value: BigNumberish;
          data: BytesLike;
        }[];
        creator: string;
        reciever: string;
        expireTime: BigNumberish;
        numberOfUses: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
