/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IManagerFacetInterface extends ethers.utils.Interface {
  functions: {
    "managerFacet_init(uint256,uint256)": FunctionFragment;
    "managerFacet_addPolicies(address[],address[],bytes[])": FunctionFragment;
    "managerFacet_executePolicyRequest(uint256)": FunctionFragment;
    "managerFacet_removePolicies(address[],address[],bytes[])": FunctionFragment;
    "managerFacet_replacePolicies(address[],address[],bytes[])": FunctionFragment;
    "managerFacet_getData()": FunctionFragment;
    "managerFacet_getPolicyRequestsLength()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "managerFacet_init",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_addPolicies",
    values: [string[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_executePolicyRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_removePolicies",
    values: [string[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_replacePolicies",
    values: [string[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_getData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_getPolicyRequestsLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "managerFacet_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_addPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_executePolicyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_removePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_replacePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_getData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_getPolicyRequestsLength",
    data: BytesLike
  ): Result;

  events: {};
}

export class IManagerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IManagerFacetInterface;

  functions: {
    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_getData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        updateDelay: BigNumber;
        activationRange: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  managerFacet_init(
    _updateDelay: BigNumberish,
    _activationRange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_addPolicies(
    _policyAddresses: string[],
    _inits: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_executePolicyRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_removePolicies(
    _policyAddresses: string[],
    _inits: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_replacePolicies(
    _policyAddresses: string[],
    _inits: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_getData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      updateDelay: BigNumber;
      activationRange: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  managerFacet_getPolicyRequestsLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_getData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        updateDelay: BigNumber;
        activationRange: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_getData(overrides?: CallOverrides): Promise<BigNumber>;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_getData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
