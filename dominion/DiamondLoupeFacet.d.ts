/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DiamondLoupeFacetInterface extends ethers.utils.Interface {
  functions: {
    "getCallbackSelector()": FunctionFragment;
    "getFunctionSelectors()": FunctionFragment;
    "getAllowedExternalFunctions()": FunctionFragment;
    "getRequiredSelectors()": FunctionFragment;
    "facets()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCallbackSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunctionSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedExternalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCallbackSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedExternalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export class DiamondLoupeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondLoupeFacetInterface;

  functions: {
    getCallbackSelector(overrides?: CallOverrides): Promise<[string]>;

    getFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    getAllowedExternalFunctions(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    getRequiredSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    /**
     * Gets all facets and their selectors.
     */
    facets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[]
      ] & {
        facets_: ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[];
      }
    >;

    /**
     * Gets all the function selectors provided by a facet.
     * @param _facet The facet address.
     */
    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    /**
     * Get all the facet addresses used by a diamond.
     */
    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    /**
     * If facet is not found return address(0).
     * Gets the facet that supports the given selector.
     * @param _functionSelector The function selector.
     */
    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getCallbackSelector(overrides?: CallOverrides): Promise<string>;

  getFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

  getAllowedExternalFunctions(overrides?: CallOverrides): Promise<string[]>;

  getRequiredSelectors(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets all facets and their selectors.
   */
  facets(
    overrides?: CallOverrides
  ): Promise<
    ([string, string[]] & {
      facetAddress: string;
      functionSelectors: string[];
    })[]
  >;

  /**
   * Gets all the function selectors provided by a facet.
   * @param _facet The facet address.
   */
  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Get all the facet addresses used by a diamond.
   */
  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  /**
   * If facet is not found return address(0).
   * Gets the facet that supports the given selector.
   * @param _functionSelector The function selector.
   */
  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getCallbackSelector(overrides?: CallOverrides): Promise<string>;

    getFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

    getAllowedExternalFunctions(overrides?: CallOverrides): Promise<string[]>;

    getRequiredSelectors(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets all facets and their selectors.
     */
    facets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & {
        facetAddress: string;
        functionSelectors: string[];
      })[]
    >;

    /**
     * Gets all the function selectors provided by a facet.
     * @param _facet The facet address.
     */
    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Get all the facet addresses used by a diamond.
     */
    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    /**
     * If facet is not found return address(0).
     * Gets the facet that supports the given selector.
     * @param _functionSelector The function selector.
     */
    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getCallbackSelector(overrides?: CallOverrides): Promise<BigNumber>;

    getFunctionSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedExternalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets all facets and their selectors.
     */
    facets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets all the function selectors provided by a facet.
     * @param _facet The facet address.
     */
    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get all the facet addresses used by a diamond.
     */
    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * If facet is not found return address(0).
     * Gets the facet that supports the given selector.
     * @param _functionSelector The function selector.
     */
    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCallbackSelector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedExternalFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all facets and their selectors.
     */
    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets all the function selectors provided by a facet.
     * @param _facet The facet address.
     */
    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get all the facet addresses used by a diamond.
     */
    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * If facet is not found return address(0).
     * Gets the facet that supports the given selector.
     * @param _functionSelector The function selector.
     */
    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
