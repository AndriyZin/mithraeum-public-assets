/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ManagerFacetInterface extends ethers.utils.Interface {
  functions: {
    "content()": FunctionFragment;
    "getAllowedExternalFunctions()": FunctionFragment;
    "getCallbackSelector()": FunctionFragment;
    "getContent()": FunctionFragment;
    "getFunctionSelectors()": FunctionFragment;
    "getRequiredSelectors()": FunctionFragment;
    "setContent(string)": FunctionFragment;
    "managerFacet_init(uint256,uint256)": FunctionFragment;
    "managerFacet_addPolicies(address[],address[],bytes[])": FunctionFragment;
    "managerFacet_replacePolicies(address[],address[],bytes[])": FunctionFragment;
    "managerFacet_removePolicies(address[],address[],bytes[])": FunctionFragment;
    "managerFacet_executePolicyRequest(uint256)": FunctionFragment;
    "managerFacet_cancelPolicyRequest(uint256)": FunctionFragment;
    "managerFacet_getPolicyRequests(uint256,uint256)": FunctionFragment;
    "managerFacet_getPolicyRequestsLength()": FunctionFragment;
    "managerFacet_getData()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "content", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllowedExternalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallbackSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunctionSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setContent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "managerFacet_init",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_addPolicies",
    values: [string[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_replacePolicies",
    values: [string[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_removePolicies",
    values: [string[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_executePolicyRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_cancelPolicyRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_getPolicyRequests",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_getPolicyRequestsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerFacet_getData",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedExternalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallbackSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_addPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_replacePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_removePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_executePolicyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_cancelPolicyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_getPolicyRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_getPolicyRequestsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFacet_getData",
    data: BytesLike
  ): Result;

  events: {
    "NewContent(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewContent"): EventFragment;
}

export type NewContentEvent = TypedEvent<[string] & { content: string }>;

export class ManagerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ManagerFacetInterface;

  functions: {
    content(overrides?: CallOverrides): Promise<[string]>;

    getAllowedExternalFunctions(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    getCallbackSelector(overrides?: CallOverrides): Promise<[string]>;

    getContent(overrides?: CallOverrides): Promise<[string]>;

    getFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    getRequiredSelectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { res: string[] }>;

    setContent(
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_cancelPolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerFacet_getPolicyRequests(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string[],
          string[],
          string[],
          boolean[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          policyAddresses: string[];
          inits: string[];
          data: string[];
          isAdd: boolean[];
          creationTime: BigNumber;
          executionTime: BigNumber;
          activationRangeStart: BigNumber;
          activationRangeEnd: BigNumber;
          canceled: boolean;
        })[]
      ] & {
        res: ([
          string[],
          string[],
          string[],
          boolean[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          policyAddresses: string[];
          inits: string[];
          data: string[];
          isAdd: boolean[];
          creationTime: BigNumber;
          executionTime: BigNumber;
          activationRangeStart: BigNumber;
          activationRangeEnd: BigNumber;
          canceled: boolean;
        })[];
      }
    >;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    managerFacet_getData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        updateDelay: BigNumber;
        activationRange: BigNumber;
        lastUpdate: BigNumber;
      }
    >;
  };

  content(overrides?: CallOverrides): Promise<string>;

  getAllowedExternalFunctions(overrides?: CallOverrides): Promise<string[]>;

  getCallbackSelector(overrides?: CallOverrides): Promise<string>;

  getContent(overrides?: CallOverrides): Promise<string>;

  getFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

  getRequiredSelectors(overrides?: CallOverrides): Promise<string[]>;

  setContent(
    _content: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_init(
    _updateDelay: BigNumberish,
    _activationRange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_addPolicies(
    _policyAddresses: string[],
    _inits: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_replacePolicies(
    _policyAddresses: string[],
    _inits: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_removePolicies(
    _policyAddresses: string[],
    _inits: string[],
    _calldata: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_executePolicyRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_cancelPolicyRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerFacet_getPolicyRequests(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string[],
      string[],
      string[],
      boolean[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      policyAddresses: string[];
      inits: string[];
      data: string[];
      isAdd: boolean[];
      creationTime: BigNumber;
      executionTime: BigNumber;
      activationRangeStart: BigNumber;
      activationRangeEnd: BigNumber;
      canceled: boolean;
    })[]
  >;

  managerFacet_getPolicyRequestsLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  managerFacet_getData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      updateDelay: BigNumber;
      activationRange: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  callStatic: {
    content(overrides?: CallOverrides): Promise<string>;

    getAllowedExternalFunctions(overrides?: CallOverrides): Promise<string[]>;

    getCallbackSelector(overrides?: CallOverrides): Promise<string>;

    getContent(overrides?: CallOverrides): Promise<string>;

    getFunctionSelectors(overrides?: CallOverrides): Promise<string[]>;

    getRequiredSelectors(overrides?: CallOverrides): Promise<string[]>;

    setContent(_content: string, overrides?: CallOverrides): Promise<void>;

    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_cancelPolicyRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerFacet_getPolicyRequests(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string[],
        string[],
        string[],
        boolean[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        policyAddresses: string[];
        inits: string[];
        data: string[];
        isAdd: boolean[];
        creationTime: BigNumber;
        executionTime: BigNumber;
        activationRangeStart: BigNumber;
        activationRangeEnd: BigNumber;
        canceled: boolean;
      })[]
    >;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerFacet_getData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        updateDelay: BigNumber;
        activationRange: BigNumber;
        lastUpdate: BigNumber;
      }
    >;
  };

  filters: {
    "NewContent(string)"(
      content?: null
    ): TypedEventFilter<[string], { content: string }>;

    NewContent(content?: null): TypedEventFilter<[string], { content: string }>;
  };

  estimateGas: {
    content(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedExternalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    getCallbackSelector(overrides?: CallOverrides): Promise<BigNumber>;

    getContent(overrides?: CallOverrides): Promise<BigNumber>;

    getFunctionSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    setContent(
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_cancelPolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerFacet_getPolicyRequests(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerFacet_getData(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    content(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedExternalFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCallbackSelector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFunctionSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContent(
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_init(
      _updateDelay: BigNumberish,
      _activationRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_addPolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_replacePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_removePolicies(
      _policyAddresses: string[],
      _inits: string[],
      _calldata: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_executePolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_cancelPolicyRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerFacet_getPolicyRequests(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerFacet_getPolicyRequestsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerFacet_getData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
