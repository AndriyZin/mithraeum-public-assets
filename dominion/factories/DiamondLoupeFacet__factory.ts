/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DiamondLoupeFacet,
  DiamondLoupeFacetInterface,
} from "../DiamondLoupeFacet";

const _abi = [
  {
    inputs: [],
    name: "getCallbackSelector",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "res",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllowedExternalFunctions",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "res",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequiredSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "res",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "facetFunctionSelectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061078c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80635425df59116100665780635425df59146100eb5780637a0ed62714610100578063adfca15e14610115578063cdffacc614610128578063fd896f9d1461014857610093565b806301e193991461009857806301ffc9a7146100b65780631e7d9e841461009857806352ef6b2c146100d6575b600080fd5b6100a0610150565b6040516100ad91906106a9565b60405180910390f35b6100c96100c43660046105dc565b610155565b6040516100ad9190610736565b6100de610188565b6040516100ad919061065c565b6100f36101f4565b6040516100ad9190610741565b6101086101fd565b6040516100ad91906106bc565b6100a06101233660046105ae565b61037b565b61013b6101363660046105dc565b610425565b6040516100ad9190610648565b6100a061045a565b606090565b600080610160610572565b6001600160e01b0319841660009081526003909101602052604090205460ff16915050919050565b60606000610194610572565b600281018054604080516020808402820181019092528281529394508301828280156101e957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101cb575b505050505091505090565b61060f60f31b90565b60606000610209610572565b60028101549091508067ffffffffffffffff8111801561022857600080fd5b5060405190808252806020026020018201604052801561026257816020015b61024f610596565b8152602001906001900390816102475790505b50925060005b8181101561037557600083600201828154811061028157fe5b9060005260206000200160009054906101000a90046001600160a01b03169050808583815181106102ae57fe5b6020908102919091018101516001600160a01b03928316905290821660009081526001860182526040908190208054825181850281018501909352808352919290919083018282801561034d57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161030f5790505b505050505085838151811061035e57fe5b602090810291909101810151015250600101610268565b50505090565b60606000610387610572565b6001600160a01b0384166000908152600182016020908152604091829020805483518184028101840190945280845293945091929083018282801561041857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103da5790505b5050505050915050919050565b600080610430610572565b6001600160e01b03199093166000908152602093909352505060409020546001600160a01b031690565b60408051600580825260c082019092526060916020820160a080368337019050509050637a0ed62760e01b8160008151811061049257fe5b6001600160e01b03199092166020928302919091019091015280516356fe50af60e11b90829060019081106104c357fe5b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060029081106104f457fe5b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b908290600390811061052557fe5b6001600160e01b03199092166020928302919091019091015280516301ffc9a760e01b908290600490811061055657fe5b6001600160e01b03199092166020928302919091019091015290565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60408051808201909152600081526060602082015290565b6000602082840312156105bf578081fd5b81356001600160a01b03811681146105d5578182fd5b9392505050565b6000602082840312156105ed578081fd5b81356001600160e01b0319811681146105d5578182fd5b6000815180845260208085019450808401835b8381101561063d5781516001600160e01b03191687529582019590820190600101610617565b509495945050505050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561069d5783516001600160a01b031683529284019291840191600101610678565b50909695505050505050565b6000602082526105d56020830184610604565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561072857888303603f19018552815180516001600160a01b0316845287015187840187905261071587850182610604565b95880195935050908601906001016106e0565b509098975050505050505050565b901515815260200190565b6001600160e01b03199190911681526020019056fea26469706673582212204554707d3c0bf99c134f901f1a24211f109ad0070129be8bd23346a6b2d1616b64736f6c63430007060033";

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondLoupeFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupeFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondLoupeFacet {
    return super.attach(address) as DiamondLoupeFacet;
  }
  connect(signer: Signer): DiamondLoupeFacet__factory {
    return super.connect(signer) as DiamondLoupeFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new utils.Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondLoupeFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupeFacet;
  }
}
