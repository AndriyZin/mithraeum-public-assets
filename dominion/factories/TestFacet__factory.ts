/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestFacet, TestFacetInterface } from "../TestFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "NewContent",
    type: "event",
  },
  {
    inputs: [],
    name: "content",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllowedExternalFunctions",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "res",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCallbackSelector",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContent",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "res",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequiredSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "res",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_content",
        type: "string",
      },
    ],
    name: "setContent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "building",
        type: "string",
      },
    ],
    name: "a",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "pack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107b3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806359016c791161007157806359016c791461028b57806366e41cb7146103085780636b59084d1461032c5780638a4d5a671461033457806392aec2fc1461033c578063fd896f9d146103e2576100a9565b806301e19399146100ae578063059274c9146101065780631e7d9e84146100ae5780633be8fd6a146101be5780635425df5914610266575b600080fd5b6100b66103ea565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100f25781810151838201526020016100da565b505050509050019250505060405180910390f35b6101ac6004803603602081101561011c57600080fd5b81019060208101813564010000000081111561013757600080fd5b82018360208201111561014957600080fd5b8035906020019184600183028401116401000000008311171561016b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103ef945050505050565b60408051918252519081900360200190f35b610264600480360360208110156101d457600080fd5b8101906020810181356401000000008111156101ef57600080fd5b82018360208201111561020157600080fd5b8035906020019184600183028401116401000000008311171561022357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610400945050505050565b005b61026e6104b0565b604080516001600160e01b03199092168252519081900360200190f35b6102936104b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102cd5781810151838201526020016102b5565b50505050905090810190601f1680156102fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61031061054f565b604080516001600160a01b039092168252519081900360200190f35b610264610553565b610293610555565b6101ac6004803603602081101561035257600080fd5b81019060208101813564010000000081111561036d57600080fd5b82018360208201111561037f57600080fd5b803590602001918460018302840111640100000000831117156103a157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105e3945050505050565b6100b661065a565b606090565b60006103fa826105e3565b92915050565b80516104139060009060208401906106dc565b507fff74e91598aed6ae5d2fdcf8b24cd2c7be49a0808112a305069355b7160f23f9816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047357818101518382015260200161045b565b50505050905090810190601f1680156104a05780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b61060f60f31b90565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105455780601f1061051a57610100808354040283529160200191610545565b820191906000526020600020905b81548152906001019060200180831161052857829003601f168201915b5050505050905090565b3390565b565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081565b6000816040516020018082805190602001908083835b602083106106185780518252601f1990920191602091820191016105f9565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b6040805160028082526060808301845292602083019080368337019050509050636b59084d60e01b8160008151811061068f57fe5b6001600160e01b03199092166020928302919091019091015280516366e41cb760e01b90829060019081106106c057fe5b6001600160e01b03199092166020928302919091019091015290565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826107125760008555610758565b82601f1061072b57805160ff1916838001178555610758565b82800160010185558215610758579182015b8281111561075857825182559160200191906001019061073d565b50610764929150610768565b5090565b5b80821115610764576000815560010161076956fea2646970667358221220bb01d6cdc79f695daa576dcd2f18e49abf31e24d88c3e93bad8e32d7096dc3c864736f6c63430007060033";

export class TestFacet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFacet> {
    return super.deploy(overrides || {}) as Promise<TestFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestFacet {
    return super.attach(address) as TestFacet;
  }
  connect(signer: Signer): TestFacet__factory {
    return super.connect(signer) as TestFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFacetInterface {
    return new utils.Interface(_abi) as TestFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFacet {
    return new Contract(address, _abi, signerOrProvider) as TestFacet;
  }
}
