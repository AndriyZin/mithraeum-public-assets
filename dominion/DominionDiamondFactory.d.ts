/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DominionDiamondFactoryInterface extends ethers.utils.Interface {
  functions: {
    "basicAssetsAddresses(uint256)": FunctionFragment;
    "basicAssetsCalldata(uint256)": FunctionFragment;
    "basicAssetsInits(uint256)": FunctionFragment;
    "content()": FunctionFragment;
    "initiateFacetAddress()": FunctionFragment;
    "mainFacets(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pluginVerifier()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "worldAddress()": FunctionFragment;
    "setPluginVerifier(address)": FunctionFragment;
    "addBasicFacet(address,address,bytes)": FunctionFragment;
    "changeBasicFacet(uint256,address,address,bytes)": FunctionFragment;
    "newDiamond(address[],string,string)": FunctionFragment;
    "setContent(string)": FunctionFragment;
    "getContent()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "basicAssetsAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "basicAssetsCalldata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "basicAssetsInits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "content", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initiateFacetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainFacets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pluginVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "worldAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPluginVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBasicFacet",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBasicFacet",
    values: [BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newDiamond",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(functionFragment: "setContent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "basicAssetsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basicAssetsCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basicAssetsInits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "content", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateFacetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainFacets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pluginVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPluginVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBasicFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBasicFacet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newDiamond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setContent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;

  events: {
    "BasicFacetUpdated(uint256,address,address,bytes)": EventFragment;
    "NewBasicFacet(address,address,bytes)": EventFragment;
    "NewDiamond(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BasicFacetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBasicFacet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDiamond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BasicFacetUpdatedEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    index: BigNumber;
    facetAddress: string;
    init: string;
    data: string;
  }
>;

export type NewBasicFacetEvent = TypedEvent<
  [string, string, string] & {
    facetAddress: string;
    init: string;
    data: string;
  }
>;

export type NewDiamondEvent = TypedEvent<
  [string, string] & { diamond: string; owner: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class DominionDiamondFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DominionDiamondFactoryInterface;

  functions: {
    basicAssetsAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    basicAssetsCalldata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    basicAssetsInits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    content(overrides?: CallOverrides): Promise<[string]>;

    initiateFacetAddress(overrides?: CallOverrides): Promise<[string]>;

    mainFacets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    pluginVerifier(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    worldAddress(overrides?: CallOverrides): Promise<[string]>;

    setPluginVerifier(
      _pluginVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBasicFacet(
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeBasicFacet(
      _index: BigNumberish,
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newDiamond(
      _owners: string[],
      _name: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContent(
      _newContent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContent(overrides?: CallOverrides): Promise<[string]>;
  };

  basicAssetsAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  basicAssetsCalldata(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  basicAssetsInits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  content(overrides?: CallOverrides): Promise<string>;

  initiateFacetAddress(overrides?: CallOverrides): Promise<string>;

  mainFacets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  pluginVerifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  worldAddress(overrides?: CallOverrides): Promise<string>;

  setPluginVerifier(
    _pluginVerifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBasicFacet(
    _address: string,
    _init: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeBasicFacet(
    _index: BigNumberish,
    _address: string,
    _init: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newDiamond(
    _owners: string[],
    _name: string,
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContent(
    _newContent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContent(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    basicAssetsAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    basicAssetsCalldata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    basicAssetsInits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    content(overrides?: CallOverrides): Promise<string>;

    initiateFacetAddress(overrides?: CallOverrides): Promise<string>;

    mainFacets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    pluginVerifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    worldAddress(overrides?: CallOverrides): Promise<string>;

    setPluginVerifier(
      _pluginVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addBasicFacet(
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeBasicFacet(
      _index: BigNumberish,
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    newDiamond(
      _owners: string[],
      _name: string,
      _config: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContent(_newContent: string, overrides?: CallOverrides): Promise<void>;

    getContent(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BasicFacetUpdated(uint256,address,address,bytes)"(
      index?: null,
      facetAddress?: null,
      init?: null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { index: BigNumber; facetAddress: string; init: string; data: string }
    >;

    BasicFacetUpdated(
      index?: null,
      facetAddress?: null,
      init?: null,
      data?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { index: BigNumber; facetAddress: string; init: string; data: string }
    >;

    "NewBasicFacet(address,address,bytes)"(
      facetAddress?: null,
      init?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { facetAddress: string; init: string; data: string }
    >;

    NewBasicFacet(
      facetAddress?: null,
      init?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { facetAddress: string; init: string; data: string }
    >;

    "NewDiamond(address,address)"(
      diamond?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { diamond: string; owner: string }>;

    NewDiamond(
      diamond?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { diamond: string; owner: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    basicAssetsAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    basicAssetsCalldata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    basicAssetsInits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    content(overrides?: CallOverrides): Promise<BigNumber>;

    initiateFacetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    mainFacets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pluginVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    worldAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setPluginVerifier(
      _pluginVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBasicFacet(
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeBasicFacet(
      _index: BigNumberish,
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newDiamond(
      _owners: string[],
      _name: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContent(
      _newContent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    basicAssetsAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basicAssetsCalldata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basicAssetsInits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    content(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateFacetAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainFacets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pluginVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    worldAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPluginVerifier(
      _pluginVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBasicFacet(
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeBasicFacet(
      _index: BigNumberish,
      _address: string,
      _init: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newDiamond(
      _owners: string[],
      _name: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContent(
      _newContent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
