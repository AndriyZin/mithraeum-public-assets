/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PluginVerifierInterface extends ethers.utils.Interface {
  functions: {
    "approvedCreators(address)": FunctionFragment;
    "existedName(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "plugins(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "changeApprovedCreator(address,bool)": FunctionFragment;
    "verifyPlugin(address,bool)": FunctionFragment;
    "newPlugin(address,address,string,string)": FunctionFragment;
    "modifyPlugin(address,address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approvedCreators",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "existedName", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plugins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeApprovedCreator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPlugin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "newPlugin",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPlugin",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existedName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plugins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeApprovedCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPlugin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyPlugin",
    data: BytesLike
  ): Result;

  events: {
    "ChangeApprovedFactory(address,bool)": EventFragment;
    "NewApprovedFactory(address,bool)": EventFragment;
    "NewPlugin(address,address,address,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PluginModified(address,string)": EventFragment;
    "PluginVerified(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeApprovedFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewApprovedFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlugin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginVerified"): EventFragment;
}

export type ChangeApprovedFactoryEvent = TypedEvent<
  [string, boolean] & { factoryAddress: string; status: boolean }
>;

export type NewApprovedFactoryEvent = TypedEvent<
  [string, boolean] & { factory: string; status: boolean }
>;

export type NewPluginEvent = TypedEvent<
  [string, string, string, string, string] & {
    pluginAddress: string;
    creator: string;
    manager: string;
    name: string;
    config: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PluginModifiedEvent = TypedEvent<
  [string, string] & { pluginAddress: string; config: string }
>;

export type PluginVerifiedEvent = TypedEvent<
  [string, boolean] & { pluginAddress: string; status: boolean }
>;

export class PluginVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PluginVerifierInterface;

  functions: {
    approvedCreators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    existedName(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    plugins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, BigNumber] & {
        name: string;
        pluginAddress: string;
        manager: string;
        verified: boolean;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeApprovedCreator(
      _factory: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyPlugin(
      _pluginAddress: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newPlugin(
      _pluginAddress: string,
      _manager: string,
      _name: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyPlugin(
      _pluginAddress: string,
      _manager: string,
      config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approvedCreators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  existedName(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  plugins(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber, BigNumber] & {
      name: string;
      pluginAddress: string;
      manager: string;
      verified: boolean;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeApprovedCreator(
    _factory: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyPlugin(
    _pluginAddress: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newPlugin(
    _pluginAddress: string,
    _manager: string,
    _name: string,
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyPlugin(
    _pluginAddress: string,
    _manager: string,
    config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvedCreators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    existedName(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    plugins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, BigNumber] & {
        name: string;
        pluginAddress: string;
        manager: string;
        verified: boolean;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeApprovedCreator(
      _factory: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyPlugin(
      _pluginAddress: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    newPlugin(
      _pluginAddress: string,
      _manager: string,
      _name: string,
      _config: string,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyPlugin(
      _pluginAddress: string,
      _manager: string,
      config: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeApprovedFactory(address,bool)"(
      factoryAddress?: null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { factoryAddress: string; status: boolean }
    >;

    ChangeApprovedFactory(
      factoryAddress?: null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { factoryAddress: string; status: boolean }
    >;

    "NewApprovedFactory(address,bool)"(
      factory?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { factory: string; status: boolean }
    >;

    NewApprovedFactory(
      factory?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { factory: string; status: boolean }
    >;

    "NewPlugin(address,address,address,string,string)"(
      pluginAddress?: string | null,
      creator?: string | null,
      manager?: string | null,
      name?: null,
      config?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        pluginAddress: string;
        creator: string;
        manager: string;
        name: string;
        config: string;
      }
    >;

    NewPlugin(
      pluginAddress?: string | null,
      creator?: string | null,
      manager?: string | null,
      name?: null,
      config?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        pluginAddress: string;
        creator: string;
        manager: string;
        name: string;
        config: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PluginModified(address,string)"(
      pluginAddress?: string | null,
      config?: null
    ): TypedEventFilter<
      [string, string],
      { pluginAddress: string; config: string }
    >;

    PluginModified(
      pluginAddress?: string | null,
      config?: null
    ): TypedEventFilter<
      [string, string],
      { pluginAddress: string; config: string }
    >;

    "PluginVerified(address,bool)"(
      pluginAddress?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { pluginAddress: string; status: boolean }
    >;

    PluginVerified(
      pluginAddress?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { pluginAddress: string; status: boolean }
    >;
  };

  estimateGas: {
    approvedCreators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    existedName(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    plugins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeApprovedCreator(
      _factory: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyPlugin(
      _pluginAddress: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newPlugin(
      _pluginAddress: string,
      _manager: string,
      _name: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyPlugin(
      _pluginAddress: string,
      _manager: string,
      config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedCreators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    existedName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plugins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeApprovedCreator(
      _factory: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyPlugin(
      _pluginAddress: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newPlugin(
      _pluginAddress: string,
      _manager: string,
      _name: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyPlugin(
      _pluginAddress: string,
      _manager: string,
      config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
